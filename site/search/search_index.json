{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a la Documentaci\u00f3n del desarrollor Backend del proyecto AgroInsight","text":"<p>AgroInsight es una aplicaci\u00f3n de gesti\u00f3n agr\u00edcola dise\u00f1ada para optimizar el cultivo de ma\u00edz en la regi\u00f3n del Huila, Colombia. Esta documentaci\u00f3n proporciona una gu\u00eda completa para los desarrolladores del sistema.</p>"},{"location":"#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Gesti\u00f3n de Usuarios: Sistema de registro, autenticaci\u00f3n y gesti\u00f3n de roles.</li> <li>Administraci\u00f3n de Fincas y Lotes: Herramientas para manejar la informaci\u00f3n de fincas y lotes de cultivo.</li> <li>An\u00e1lisis de Suelos: Funcionalidad para procesar y analizar datos de suelos mediante inteligencia artificial.</li> <li>Detecci\u00f3n de Plagas: Sistema de detecci\u00f3n temprana del gusano cogollero utilizando visi\u00f3n por computadora.</li> <li>Integraci\u00f3n de Datos Meteorol\u00f3gicos: Obtenci\u00f3n y an\u00e1lisis de datos clim\u00e1ticos relevantes para el cultivo.</li> <li>Recomendaciones Personalizadas: Generaci\u00f3n de recomendaciones basadas en los datos recolectados y analizados.</li> <li>Generaci\u00f3n de Informes: Creaci\u00f3n de informes detallados sobre el estado y progreso de los cultivos.</li> <li>Funcionalidad offline: Admite acceso y sincronizaci\u00f3n de datos sin conexi\u00f3n.</li> </ul>"},{"location":"#tecnologias-utilizadas","title":"Tecnolog\u00edas Utilizadas","text":"<ul> <li>Backend: FastAPI 0.112.1, Python 3.12</li> <li>Frontend: React Native para aplicaciones m\u00f3viles y web</li> <li>Base de Datos: MySQL 8.0</li> <li>ORM: SQLAlchemy 2.0.32</li> <li>Containerization: Docker</li> <li>IA y An\u00e1lisis de Datos: TensorFlow 2.16.1, OpenCV 4.10.0</li> <li>Despliegue: Railway para backend y base de datos</li> </ul>"},{"location":"#como-usar-esta-documentacion","title":"C\u00f3mo Usar esta Documentaci\u00f3n","text":"<ul> <li>Gu\u00edas: Para empezar r\u00e1pidamente con el proyecto, consulta nuestra secci\u00f3n de gu\u00edas.</li> <li>M\u00f3dulos: Explora la documentaci\u00f3n detallada de cada m\u00f3dulo del sistema.</li> <li>API: Revisa la documentaci\u00f3n de la API generada autom\u00e1ticamente con Swagger UI y ReDoc.</li> <li>Desarrollo: Si eres desarrollador, no olvides revisar nuestras gu\u00edas de contribuci\u00f3n y est\u00e1ndares de c\u00f3digo.</li> </ul> <p>\u00a1Bienvenido al proyecto AgroInsight, tu compa\u00f1ero en la agricultura de precisi\u00f3n!</p>"},{"location":"about/","title":"about","text":"<p>Contenido para docs\\about.md</p>"},{"location":"complement-docs/overview/","title":"overview","text":"<p>Contenido para docs\\fast-api-docs\\overview.md</p>"},{"location":"cultural_practices/endpoints/","title":"endpoints","text":"<p>Contenido para docs\\cultural_practices\\endpoints.md</p>"},{"location":"cultural_practices/models/","title":"models","text":"<p>Contenido para docs\\cultural_practices\\models.md</p>"},{"location":"cultural_practices/overview/","title":"overview","text":"<p>Contenido para docs\\cultural_practices\\overview.md</p>"},{"location":"cultural_practices/use_cases/","title":"use_cases","text":"<p>Contenido para docs\\cultural_practices\\use_cases.md</p>"},{"location":"development/coding_standards/","title":"Est\u00e1ndares de Codificaci\u00f3n para AgroInsight","text":"<p>Este documento describe los est\u00e1ndares de codificaci\u00f3n y las mejores pr\u00e1cticas para el proyecto AgroInsight.  Adherirse a estos est\u00e1ndares garantiza la consistencia, legibilidad y mantenibilidad en toda la base de c\u00f3digo.</p>"},{"location":"development/coding_standards/#1-convenciones-de-nombres","title":"1. Convenciones de Nombres","text":""},{"location":"development/coding_standards/#11-variables-y-funciones","title":"1.1 Variables y Funciones","text":"<ul> <li>Usar <code>snake_case</code> para nombres de variables y funciones.</li> <li>Los nombres deben ser descriptivos e indicar el prop\u00f3sito o contenido.</li> </ul> <p>Ejemplos:</p> <pre><code>user_name = \"John Doe\"\ndef calculate_total_cost(items):\n    # Implementaci\u00f3n de la funci\u00f3n\n</code></pre>"},{"location":"development/coding_standards/#12-clases","title":"1.2 Clases","text":"<ul> <li>Usar <code>PascalCase</code> para nombres de clases.</li> <li>Los nombres de las clases deben ser sustantivos y representar el objeto o concepto.</li> </ul> <p>Ejemplo:</p> <pre><code>class UserProfile:\n    # Implementaci\u00f3n de la clase\n</code></pre>"},{"location":"development/coding_standards/#13-modulos-y-paquetes","title":"1.3 M\u00f3dulos y Paquetes","text":"<ul> <li>Usar <code>snake_case</code> para nombres de m\u00f3dulos y paquetes.</li> <li>Mantener los nombres de los m\u00f3dulos cortos y descriptivos.</li> </ul> <p>Ejemplo:</p> <pre><code>import user_authentication\nfrom data_processing import clean_data\n</code></pre>"},{"location":"development/coding_standards/#14-constantes","title":"1.4 Constantes","text":"<ul> <li>Usar <code>MAY\u00daSCULAS</code> con guiones bajos para las constantes.</li> </ul> <p>Ejemplo:</p> <pre><code>MAX_LOGIN_ATTEMPTS = 3\nDEFAULT_TIMEOUT = 30\n</code></pre>"},{"location":"development/coding_standards/#2-diseno-del-codigo","title":"2. Dise\u00f1o del C\u00f3digo","text":""},{"location":"development/coding_standards/#21-indentacion","title":"2.1 Indentaci\u00f3n","text":"<ul> <li>Usar 4 espacios para la indentaci\u00f3n.</li> <li>No usar tabulaciones.</li> </ul>"},{"location":"development/coding_standards/#22-longitud-maxima-de-linea","title":"2.2 Longitud M\u00e1xima de L\u00ednea","text":"<ul> <li>Limitar todas las l\u00edneas a un m\u00e1ximo de 79 caracteres.</li> <li>Para bloques de texto largos (docstrings o comentarios), limitar la longitud a 72 caracteres.</li> </ul>"},{"location":"development/coding_standards/#23-lineas-en-blanco","title":"2.3 L\u00edneas en Blanco","text":"<ul> <li>Rodear las funciones y clases de nivel superior con dos l\u00edneas en blanco.</li> <li>Usar una l\u00ednea en blanco para separar los m\u00e9todos dentro de una clase.</li> <li>Usar l\u00edneas en blanco con moderaci\u00f3n dentro de las funciones para indicar secciones l\u00f3gicas.</li> </ul>"},{"location":"development/coding_standards/#3-importaciones","title":"3. Importaciones","text":"<ul> <li>Las importaciones deben estar en l\u00edneas separadas.</li> <li>Agrupar las importaciones en el siguiente orden:</li> <li>Importaciones de la biblioteca est\u00e1ndar</li> <li>Importaciones de terceros relacionadas</li> <li>Importaciones espec\u00edficas de la aplicaci\u00f3n/biblioteca local</li> <li>Usar importaciones absolutas cuando sea posible.</li> </ul> <p>Ejemplo:</p> <pre><code>import os\nimport sys\n\nfrom fastapi import FastAPI\nfrom sqlalchemy import Column, Integer\n\nfrom app.models import User\nfrom app.utils import generate_token\n</code></pre>"},{"location":"development/coding_standards/#4-formato-de-cadenas","title":"4. Formato de Cadenas","text":"<ul> <li>Usar f-strings para el formato de cadenas cuando sea posible.</li> <li>Para versiones anteriores de Python, usar el m\u00e9todo <code>.format()</code>.</li> </ul> <p>Ejemplo:</p> <pre><code>name = \"Alice\"\nage = 30\nprint(f\"Name: {name}, Age: {age}\")\n</code></pre>"},{"location":"development/coding_standards/#5-comentarios-y-documentacion","title":"5. Comentarios y Documentaci\u00f3n","text":""},{"location":"development/coding_standards/#51-comentarios-en-linea","title":"5.1 Comentarios en L\u00ednea","text":"<ul> <li>Usar comentarios en l\u00ednea con moderaci\u00f3n.</li> <li>Escribir comentarios que expliquen el porqu\u00e9, no el qu\u00e9.</li> </ul>"},{"location":"development/coding_standards/#52-docstrings-de-funciones-y-metodos","title":"5.2 Docstrings de Funciones y M\u00e9todos","text":"<ul> <li>Usar docstrings de estilo Google para funciones y m\u00e9todos.</li> <li>Incluir una breve descripci\u00f3n, par\u00e1metros, valores de retorno y excepciones generadas.</li> </ul> <p>Ejemplo:</p> <pre><code>def calculate_area(length: float, width: float) -&gt; float:\n    \"\"\"\n    Calcula el \u00e1rea de un rect\u00e1ngulo.\n\n    Parameters:\n        length (float): La longitud del rect\u00e1ngulo.\n        width (float): El ancho del rect\u00e1ngulo.\n\n    Returns:\n        float: El \u00e1rea calculada.\n\n    Raises:\n        ValueError: Si la longitud o el ancho son negativos.\n    \"\"\"\n    if length &lt; 0 or width &lt; 0:\n        raise ValueError(\"La longitud y el ancho deben ser no negativos.\")\n    return length * width\n</code></pre>"},{"location":"development/coding_standards/#53-docstrings-de-clases","title":"5.3 Docstrings de Clases","text":"<ul> <li>Incluir un docstring para cada clase que describa su prop\u00f3sito y comportamiento.</li> </ul> <p>Ejemplo:</p> <pre><code>class UserManager:\n    \"\"\"\n    Gestiona las operaciones relacionadas con el usuario, como la creaci\u00f3n, la autenticaci\u00f3n y las actualizaciones de perfil.\n\n    Esta clase interact\u00faa con el modelo de Usuario y proporciona una interfaz para la gesti\u00f3n de usuarios\n    en toda la aplicaci\u00f3n.\n    \"\"\"\n\n    def __init__(self, db_session):\n        \"\"\"\n        Inicializa el UserManager.\n\n        Parameters:\n            db_session: La sesi\u00f3n de la base de datos a utilizar para las operaciones.\n        \"\"\"\n        self.db_session = db_session\n</code></pre>"},{"location":"development/coding_standards/#6-indicacion-de-tipos-type-hinting","title":"6.  Indicaci\u00f3n de Tipos (Type Hinting)","text":"<ul> <li>Usar indicaciones de tipos para los argumentos de las funciones y los valores de retorno.</li> <li>Importar tipos del m\u00f3dulo <code>typing</code> cuando sea necesario.</li> </ul> <p>Ejemplo:</p> <pre><code>from typing import List, Dict\n\ndef process_user_data(users: List[Dict[str, Any]]) -&gt; List[User]:\n    # Implementaci\u00f3n de la funci\u00f3n\n</code></pre>"},{"location":"development/coding_standards/#7-manejo-de-errores","title":"7. Manejo de Errores","text":"<ul> <li>Usar tipos de excepci\u00f3n espec\u00edficos al generar o capturar excepciones.</li> <li>Proporcionar mensajes de error informativos.</li> </ul> <p>Ejemplo:</p> <pre><code>def divide(a: float, b: float) -&gt; float:\n    if b == 0:\n        raise ValueError(\"No se puede dividir por cero.\")\n    return a / b\n</code></pre>"},{"location":"development/coding_standards/#8-pruebas","title":"8. Pruebas","text":"<ul> <li>Escribir pruebas unitarias para todas las funciones y m\u00e9todos.</li> <li>Usar nombres descriptivos para las funciones de prueba, comenzando con <code>test_</code>.</li> <li>Apuntar a al menos un 80% de cobertura de c\u00f3digo.</li> </ul> <p>Ejemplo:</p> <pre><code>def test_calculate_area_positive_values():\n    assert calculate_area(5, 10) == 50\n\ndef test_calculate_area_raises_value_error():\n    with pytest.raises(ValueError):\n        calculate_area(-1, 5)\n</code></pre>"},{"location":"development/coding_standards/#9-control-de-versiones","title":"9. Control de Versiones","text":"<ul> <li>Escribir mensajes de confirmaci\u00f3n claros y concisos.</li> <li>Usar el tiempo presente en los mensajes de confirmaci\u00f3n (por ejemplo, \"Agregar funci\u00f3n\" no \"Funci\u00f3n agregada\").</li> <li>Hacer referencia a los n\u00fameros de problema en los mensajes de confirmaci\u00f3n cuando corresponda.</li> <li>Utilizar Semantic Versioning (SemVer) para el control de versiones del producto.</li> </ul>"},{"location":"development/coding_standards/#91-semantic-versioning-semver","title":"9.1 Semantic Versioning (SemVer)","text":"<p>El proyecto AgroInsight sigue las reglas de Semantic Versioning para el control de versiones. El formato de versi\u00f3n de SemVer consta de tres partes:</p> <ul> <li>MAJOR: Se incrementa cuando se realizan cambios incompatibles con versiones anteriores de la API.</li> <li>MINOR: Se incrementa cuando se a\u00f1aden funcionalidades de manera compatible con versiones anteriores.</li> <li>PATCH: Se incrementa cuando se realizan correcciones de errores compatibles con versiones anteriores.</li> </ul> <p>Ejemplo: 1.2.3 (MAJOR.MINOR.PATCH)</p>"},{"location":"development/coding_standards/#92-relacion-entre-commits-y-versiones","title":"9.2 Relaci\u00f3n entre Commits y Versiones","text":"<ul> <li>Commits de tipo feat generalmente incrementan la versi\u00f3n MINOR.</li> <li>Commits de tipo fix generalmente incrementan la versi\u00f3n PATCH.</li> <li>Commits con \"BREAKING CHANGE\" en las notas al pie incrementan la versi\u00f3n MAJOR.</li> </ul>"},{"location":"development/coding_standards/#93-convencion-de-commits","title":"9.3 Convenci\u00f3n de Commits","text":"<p>Se adopta la convenci\u00f3n de formato de commits de Conventional Commits para estandarizar el registro de cambios y facilitar la comprensi\u00f3n del historial de desarrollo. Los mensajes de commit deben seguir esta estructura:</p> <pre><code>&lt;tipo&gt;[\u00e1mbito opcional]: &lt;descripci\u00f3n&gt;\n\n[cuerpo opcional]\n\n[nota(s) al pie opcional(es)]\n</code></pre> <p>Donde <code>&lt;tipo&gt;</code> puede ser:</p> <ul> <li>feat: cuando se a\u00f1ade una nueva funcionalidad.</li> <li>fix: cuando se arregla un error.</li> <li>docs: cuando se realizan cambios en la documentaci\u00f3n.</li> <li>refactor: cuando se realiza una refactorizaci\u00f3n del c\u00f3digo sin cambiar su funcionalidad.</li> <li>test: cuando se a\u00f1aden o modifican pruebas.</li> <li>chore: cuando se realizan cambios de mantenimiento o tareas no relacionadas con el c\u00f3digo en s\u00ed.</li> </ul> <p>Esta estructura de versionado y convenci\u00f3n de commits ayuda a mantener un historial de cambios claro y a gestionar las actualizaciones del software de manera m\u00e1s efectiva.</p>"},{"location":"development/coding_standards/#10-organizacion-del-codigo","title":"10. Organizaci\u00f3n del C\u00f3digo","text":"<ul> <li>Seguir la estructura modular del proyecto:</li> <li><code>app/</code>: Paquete principal de la aplicaci\u00f3n<ul> <li><code>[nombre_del_m\u00f3dulo]/</code>: M\u00f3dulo espec\u00edfico (por ejemplo, <code>user</code>, <code>farm</code>, <code>plot</code>)</li> <li><code>application/</code>: Casos de uso y l\u00f3gica de negocio</li> <li><code>domain/</code>: Modelos de dominio y reglas de negocio</li> <li><code>infrastructure/</code>: Modelos de base de datos, repositorios y rutas API</li> </ul> </li> </ul>"},{"location":"development/coding_standards/#11-directrices-especificas-de-fastapi","title":"11. Directrices Espec\u00edficas de FastAPI","text":"<ul> <li>Usar modelos Pydantic para esquemas de solicitud y respuesta.</li> <li>Implementar la inyecci\u00f3n de dependencias para sesiones de base de datos y otros recursos compartidos.</li> <li>Usar funciones as\u00edncronas para operaciones de base de datos y llamadas a API externas.</li> </ul> <p>Ejemplo:</p> <pre><code>from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom app.infrastructure.database import get_db\nfrom app.user.domain.schemas import UserCreate, UserResponse\n\nrouter = APIRouter()\n\n@router.post(\"/users/\", response_model=UserResponse)\nasync def create_user(user: UserCreate, db: Session = Depends(get_db)):\n    # Implementaci\u00f3n\n</code></pre>"},{"location":"development/coding_standards/#12-operaciones-de-base-de-datos","title":"12. Operaciones de Base de Datos","text":"<ul> <li>Usar SQLAlchemy ORM para las operaciones de base de datos.</li> <li>Definir los modelos de base de datos en <code>infrastructure/orm_models.py</code>.</li> <li>Implementar el patr\u00f3n de repositorio para las interacciones con la base de datos.</li> </ul> <p>Ejemplo:</p> <pre><code>from sqlalchemy.orm import Session\nfrom app.user.infrastructure.orm_models import User\n\nclass UserRepository:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def create_user(self, user_data: dict) -&gt; User:\n        user = User(**user_data)\n        self.db.add(user)\n        self.db.commit()\n        self.db.refresh(user)\n        return user\n</code></pre>"},{"location":"development/coding_standards/#13-inyeccion-de-dependencias","title":"13. Inyecci\u00f3n de Dependencias","text":"<ul> <li>Usar el sistema de inyecci\u00f3n de dependencias de FastAPI para recursos compartidos.</li> <li>Crear dependencias reutilizables para operaciones comunes.</li> </ul> <p>Ejemplo:</p> <pre><code>from fastapi import Depends\nfrom app.infrastructure.security import get_current_user\nfrom app.user.domain.schemas import UserInDB\n\nasync def get_current_active_user(\n    current_user: UserInDB = Depends(get_current_user)\n) -&gt; UserInDB:\n    if not current_user.is_active:\n        raise HTTPException(status_code=400, detail=\"Usuario inactivo\")\n    return current_user\n</code></pre>"},{"location":"development/coding_standards/#14-gestion-de-la-configuracion","title":"14. Gesti\u00f3n de la Configuraci\u00f3n","text":"<ul> <li>Usar variables de entorno para la configuraci\u00f3n.</li> <li>Cargar la configuraci\u00f3n usando BaseSettings de Pydantic.</li> </ul> <p>Ejemplo:</p> <pre><code>from pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    database_url: str\n    secret_key: str\n    api_prefix: str = \"/api/v1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>"},{"location":"development/coding_standards/#15-registro-logging","title":"15. Registro (Logging)","text":"<ul> <li>Usar el m\u00f3dulo de registro integrado de Python.</li> <li>Configurar los niveles de registro adecuadamente para diferentes entornos.</li> </ul> <p>Ejemplo:</p> <pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\ndef some_function():\n    logger.info(\"Procesamiento iniciado\")\n    try:\n        # Alguna operaci\u00f3n\n        logger.debug(\"Detalles de la operaci\u00f3n\")\n    except Exception as e:\n        logger.error(f\"Ocurri\u00f3 un error: {str(e)}\")\n</code></pre> <p>Siguiendo estos est\u00e1ndares de codificaci\u00f3n, aseguramos una base de c\u00f3digo consistente y mantenible para el proyecto AgroInsight.  Se deben utilizar revisiones de c\u00f3digo regulares y herramientas de linting automatizadas para aplicar estos est\u00e1ndares en todo el equipo de desarrollo.</p>"},{"location":"development/contributing/","title":"contributing","text":"<p>Contenido para docs\\development\\contributing.md</p>"},{"location":"development/testing/","title":"testing","text":"<p>Contenido para docs\\development\\testing.md</p>"},{"location":"farm/endpoints/","title":"endpoints","text":"<p>Contenido para docs\\farm\\endpoints.md</p>"},{"location":"farm/models/","title":"models","text":"<p>Contenido para docs\\farm\\models.md</p>"},{"location":"farm/overview/","title":"overview","text":"<p>Contenido para docs\\farm\\overview.md</p>"},{"location":"farm/use_cases/","title":"use_cases","text":"<p>Contenido para docs\\farm\\use_cases.md</p>"},{"location":"guides/faq/","title":"Preguntas Frecuentes (FAQ)","text":""},{"location":"guides/faq/#que-es-agroinsight","title":"\u00bfQu\u00e9 es AgroInsight?","text":"<p>AgroInsight es una aplicaci\u00f3n de gesti\u00f3n agr\u00edcola dise\u00f1ada para optimizar el cultivo de ma\u00edz en la regi\u00f3n del Huila, Colombia. Utiliza tecnolog\u00edas modernas como FastAPI, React Native, y TensorFlow para ofrecer funcionalidades avanzadas como an\u00e1lisis de suelos, detecci\u00f3n de plagas, y recomendaciones personalizadas.</p>"},{"location":"guides/faq/#como-puedo-empezar-a-contribuir-al-proyecto","title":"\u00bfC\u00f3mo puedo empezar a contribuir al proyecto?","text":"<p>Para comenzar a contribuir, sigue estos pasos:</p> <ol> <li>Clona el repositorio desde GitHub.</li> <li>Configura tu entorno de desarrollo siguiendo la Gu\u00eda de Instalaci\u00f3n.</li> <li>Revisa la Gu\u00eda de Contribuci\u00f3n para entender las normas y el flujo de trabajo del proyecto.</li> </ol>"},{"location":"guides/faq/#cuales-son-los-requisitos-del-sistema-para-ejecutar-agroinsight","title":"\u00bfCu\u00e1les son los requisitos del sistema para ejecutar AgroInsight?","text":"<p>Los requisitos principales incluyen:</p> <ul> <li>Python 3.12 o superior</li> <li>Docker</li> <li>MySQL 8.0</li> <li>Poetry para la gesti\u00f3n de dependencias</li> </ul> <p>Para m\u00e1s detalles, consulta la secci\u00f3n de Requisitos del Sistema.</p>"},{"location":"guides/faq/#como-se-maneja-la-autenticacion-en-agroinsight","title":"\u00bfC\u00f3mo se maneja la autenticaci\u00f3n en AgroInsight?","text":"<p>AgroInsight utiliza autenticaci\u00f3n de dos factores (2FA) para mejorar la seguridad. Los usuarios deben verificar su identidad mediante un PIN enviado a su correo electr\u00f3nico. Para m\u00e1s detalles, revisa el endpoint <code>/login/verify</code> en la documentaci\u00f3n de la API.</p>"},{"location":"guides/faq/#que-debo-hacer-si-encuentro-un-error-durante-la-instalacion","title":"\u00bfQu\u00e9 debo hacer si encuentro un error durante la instalaci\u00f3n?","text":"<p>Si encuentras problemas durante la instalaci\u00f3n, verifica lo siguiente:</p> <ul> <li>Aseg\u00farate de que todas las dependencias est\u00e1n instaladas correctamente.</li> <li>Revisa que las variables de entorno en el archivo <code>.env</code> est\u00e9n configuradas correctamente.</li> <li>Consulta la secci\u00f3n de Soluci\u00f3n de Problemas Comunes para m\u00e1s ayuda.</li> </ul>"},{"location":"guides/faq/#como-se-gestionan-los-roles-de-usuario-en-el-sistema","title":"\u00bfC\u00f3mo se gestionan los roles de usuario en el sistema?","text":"<p>Los roles de usuario se gestionan a trav\u00e9s de la base de datos y se asignan durante la creaci\u00f3n del usuario. Los roles determinan los permisos y accesos dentro del sistema. Para m\u00e1s informaci\u00f3n, revisa el m\u00f3dulo de usuarios en la documentaci\u00f3n del c\u00f3digo.</p>"},{"location":"guides/faq/#donde-puedo-encontrar-la-documentacion-de-la-api","title":"\u00bfD\u00f3nde puedo encontrar la documentaci\u00f3n de la API?","text":"<p>La documentaci\u00f3n de la API se genera autom\u00e1ticamente y est\u00e1 disponible en:</p> <ul> <li>Swagger UI: <code>http://localhost:8000/docs</code></li> <li>ReDoc: <code>http://localhost:8000/redoc</code></li> </ul>"},{"location":"guides/faq/#como-se-despliega-agroinsight","title":"\u00bfC\u00f3mo se despliega AgroInsight?","text":"<p>El despliegue se realiza autom\u00e1ticamente en la plataforma Railway al fusionar cambios en la rama <code>main</code>. Aseg\u00farate de que todas las pruebas pasen antes de fusionar tus cambios. Para m\u00e1s detalles, consulta la secci\u00f3n de Despliegue.</p>"},{"location":"guides/faq/#como-puedo-reportar-un-problema-o-sugerir-una-mejora","title":"\u00bfC\u00f3mo puedo reportar un problema o sugerir una mejora?","text":"<p>Puedes reportar problemas o sugerir mejoras creando un issue en el repositorio de GitHub. Aseg\u00farate de proporcionar una descripci\u00f3n detallada y, si es posible, pasos para reproducir el problema.</p>"},{"location":"guides/faq/#donde-puedo-encontrar-mas-informacion-sobre-las-practicas-de-codificacion","title":"\u00bfD\u00f3nde puedo encontrar m\u00e1s informaci\u00f3n sobre las pr\u00e1cticas de codificaci\u00f3n?","text":"<p>Revisa la Gu\u00eda de Est\u00e1ndares de Codificaci\u00f3n para conocer las convenciones y pr\u00e1cticas recomendadas en el proyecto.</p>"},{"location":"guides/faq/#como-se-gestionan-las-pruebas-en-agroinsight","title":"\u00bfC\u00f3mo se gestionan las pruebas en AgroInsight?","text":"<p>Las pruebas se ejecutan utilizando <code>pytest</code>. Puedes ejecutar todas las pruebas con el comando <code>pytest</code> o pruebas espec\u00edficas seg\u00fan sea necesario. Para m\u00e1s detalles, consulta la Gu\u00eda de Pruebas.</p>"},{"location":"guides/getting_started/","title":"Gu\u00eda de Inicio R\u00e1pido para Desarrolladores Backend de AgroInsight","text":""},{"location":"guides/getting_started/#introduccion","title":"Introducci\u00f3n","text":"<p>Bienvenido al equipo de desarrollo backend de AgroInsight. Esta gu\u00eda te proporcionar\u00e1 la informaci\u00f3n necesaria para comenzar a contribuir al proyecto. AgroInsight es una aplicaci\u00f3n de gesti\u00f3n agr\u00edcola dise\u00f1ada para optimizar el cultivo de ma\u00edz en la regi\u00f3n del Huila, Colombia, utilizando tecnolog\u00edas modernas y pr\u00e1cticas de desarrollo \u00e1gil.</p>"},{"location":"guides/getting_started/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<p>El proyecto sigue una arquitectura limpia y est\u00e1 organizado en m\u00f3dulos, cada uno con sus propias capas. La estructura general es la siguiente:</p> <pre><code>app/\n\u251c\u2500\u2500 [nombre_del_modulo]/\n\u2502   \u251c\u2500\u2500 application/\n\u2502   \u251c\u2500\u2500 domain/\n\u2502   \u2514\u2500\u2500 infrastructure/\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 common/\n\u2502   \u251c\u2500\u2500 database/\n\u2502   \u251c\u2500\u2500 security/\n\u2502   \u2514\u2500\u2500 services/\n\u2514\u2500\u2500 main.py\n</code></pre>"},{"location":"guides/getting_started/#estructura-de-un-modulo","title":"Estructura de un M\u00f3dulo","text":"<p>Cuando se desarrolla un nuevo m\u00f3dulo, se debe crear una carpeta con el nombre del m\u00f3dulo dentro de <code>app/</code> y dentro de ella las siguientes subcarpetas y archivos:</p> <ul> <li><code>application/</code>: Contiene los casos de uso (archivos <code>*_use_case.py</code>).</li> <li><code>domain/</code>: Define las entidades y reglas de negocio.</li> <li><code>schemas.py</code>: Define los esquemas Pydantic del m\u00f3dulo.</li> <li><code>infrastructure/</code>:</li> <li><code>api.py</code>: Define los endpoints del m\u00f3dulo.</li> <li><code>sql_repository.py</code>: Contiene las transacciones de la base de datos.</li> <li><code>orm_models.py</code>: Define los modelos ORM del m\u00f3dulo.</li> </ul>"},{"location":"guides/getting_started/#infraestructura-comun","title":"Infraestructura Com\u00fan","text":"<p>La carpeta <code>app/infrastructure</code> contiene archivos comunes a todo el proyecto, incluyendo:</p> <ul> <li>Conexi\u00f3n a la base de datos</li> <li>Middleware JWT</li> <li>Servicios para env\u00edo de emails</li> <li>Servicios para generaci\u00f3n de PINs de seguridad</li> <li>Servicios de encriptaci\u00f3n de contrase\u00f1as</li> <li>Servicios de generaci\u00f3n de tokens de acceso</li> <li>Validadores</li> <li>Response mappers</li> <li>Importaciones de variables de entorno</li> <li>Errores personalizados</li> <li>Manejadores de errores</li> <li>C\u00f3digo com\u00fan utilizado en todos los m\u00f3dulos</li> </ul>"},{"location":"guides/getting_started/#principios-de-desarrollo","title":"Principios de Desarrollo","text":""},{"location":"guides/getting_started/#clean-code-y-arquitectura-limpia","title":"Clean Code y Arquitectura Limpia","text":"<p>El proyecto AgroInsight sigue los principios de Clean Code y Arquitectura Limpia. Esto implica:</p> <ol> <li>Separaci\u00f3n clara de responsabilidades entre capas.</li> <li>Dependencias apuntando hacia el dominio.</li> <li>Entidades de negocio independientes de frameworks y detalles de implementaci\u00f3n.</li> <li>Casos de uso que encapsulan la l\u00f3gica de la aplicaci\u00f3n.</li> </ol>"},{"location":"guides/getting_started/#convenciones-de-codigo","title":"Convenciones de C\u00f3digo","text":"<ul> <li>Seguimos la gu\u00eda de estilo PEP 8 para Python.</li> <li>Utilizamos Type Hints para anotaciones de tipo.</li> <li>Documentamos las funciones y clases utilizando docstrings en formato Google.</li> <li>Utilizamos Black para el formateo autom\u00e1tico del c\u00f3digo.</li> <li>Empleamos Flake8 para el linting del c\u00f3digo.</li> </ul>"},{"location":"guides/getting_started/#practicas-de-codificacion","title":"Pr\u00e1cticas de Codificaci\u00f3n","text":"<ol> <li> <p>Early Return: Preferimos el estilo de \"early return\" para mejorar la legibilidad y reducir la anidaci\u00f3n.</p> </li> <li> <p>DRY (Don't Repeat Yourself): Si notas que est\u00e1s repitiendo el mismo c\u00f3digo en m\u00faltiples lugares, refactoriza ese c\u00f3digo en una funci\u00f3n o m\u00e9todo reutilizable.</p> </li> <li> <p>Estructura del Proyecto: Al desarrollar o refactorizar una funcionalidad de un m\u00f3dulo existente, sigue la estructura ya definida para mantener la consistencia.</p> </li> <li> <p>Nombres Descriptivos: Usa nombres claros y significativos para variables, funciones y clases.</p> </li> <li> <p>Funciones Peque\u00f1as: Las funciones deben ser cortas y hacer una sola cosa.</p> </li> <li> <p>Comentarios \u00datiles: Los comentarios deben explicar el \"por qu\u00e9\", no el \"qu\u00e9\". El c\u00f3digo debe ser autoexplicativo.</p> </li> <li> <p>Manejo de Errores: Implementa un manejo de errores personalizado para la l\u00f3gica de negocio, la validaci\u00f3n de datos de entrada y los errores inesperados. Los mensajes deben ser claros y consistente.</p> </li> </ol>"},{"location":"guides/getting_started/#flujo-de-trabajo-de-desarrollo","title":"Flujo de Trabajo de Desarrollo","text":"<ol> <li>Crea una nueva rama para tu feature o bugfix:</li> </ol> <pre><code>git checkout -b feature/nombre-de-la-caracteristica\n</code></pre> <ol> <li> <p>Desarrolla tu c\u00f3digo siguiendo las convenciones y principios establecidos.</p> </li> <li> <p>Ejecuta las pruebas unitarias y aseg\u00farate de que pasen:</p> </li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Formatea tu c\u00f3digo:</li> </ol> <pre><code>black .\n</code></pre> <ol> <li>Ejecuta el linter:</li> </ol> <pre><code>flake8\n</code></pre> <ol> <li>Realiza un commit de tus cambios:</li> </ol> <pre><code>git add .\ngit commit -m \"Descripci\u00f3n concisa de los cambios\"\n</code></pre> <ol> <li>Sube tus cambios a GitHub:</li> </ol> <pre><code>git push origin feature/nombre-de-la-caracteristica\n</code></pre> <ol> <li>Crea un Pull Request en GitHub para revisi\u00f3n.</li> </ol>"},{"location":"guides/getting_started/#trabajando-con-la-base-de-datos","title":"Trabajando con la Base de Datos","text":"<p>AgroInsight utiliza MySQL como sistema de gesti\u00f3n de base de datos. La estructura de la base de datos se administra a trav\u00e9s de MySQL Workbench utilizando lenguaje SQL. La estructura est\u00e1 documentada en https://dbdocs.io/davidvalencia0526/AgroInsight.</p>"},{"location":"guides/getting_started/#integracion-con-servicios-externos","title":"Integraci\u00f3n con Servicios Externos","text":"<p>AgroInsight integra varios servicios externos. Aseg\u00farate de tener las credenciales necesarias en tu archivo <code>.env</code>:</p> <ul> <li>API de OpenWeatherMap para datos meteorol\u00f3gicos</li> <li>Servicio de correo electr\u00f3nico (SMTP) para notificaciones</li> <li>Servicios de almacenamiento en la nube para im\u00e1genes y archivos</li> </ul>"},{"location":"guides/getting_started/#pruebas","title":"Pruebas","text":"<p>Ejecutamos pruebas unitarias, de integraci\u00f3n y end-to-end. Para ejecutar todas las pruebas:</p> <pre><code>pytest\n</code></pre> <p>Para ejecutar pruebas espec\u00edficas:</p> <pre><code>pytest tests/unit\npytest tests/integration\npytest tests/e2e\n</code></pre>"},{"location":"guides/getting_started/#documentacion","title":"Documentaci\u00f3n","text":"<p>La documentaci\u00f3n del API se genera autom\u00e1ticamente y est\u00e1 disponible en:</p> <ul> <li>Swagger UI: <code>http://localhost:8000/docs</code></li> <li>ReDoc: <code>http://localhost:8000/redoc</code></li> </ul> <p>Para generar la documentaci\u00f3n del proyecto:</p> <pre><code>mkdocs serve\n</code></pre> <p>Esto iniciar\u00e1 un servidor local con la documentaci\u00f3n en <code>http://localhost:8000</code>.</p>"},{"location":"guides/getting_started/#despliegue","title":"Despliegue","text":"<p>El despliegue se realiza autom\u00e1ticamente a trav\u00e9s de Railway cuando se fusiona c\u00f3digo en la rama <code>main</code>. Aseg\u00farate de que todas las pruebas pasen antes de fusionar tus cambios.</p>"},{"location":"guides/getting_started/#ejemplo-de-creacion-de-un-nuevo-modulo","title":"Ejemplo de Creaci\u00f3n de un Nuevo M\u00f3dulo","text":"<p>Para ilustrar c\u00f3mo crear un nuevo m\u00f3dulo en AgroInsight, vamos a desarrollar un m\u00f3dulo de \"An\u00e1lisis de Suelo\". Este m\u00f3dulo permitir\u00e1 a los usuarios registrar y consultar an\u00e1lisis de suelo para sus lotes.</p>"},{"location":"guides/getting_started/#1-estructura-del-modulo","title":"1. Estructura del M\u00f3dulo","text":"<p>Primero, creamos la estructura de carpetas para el nuevo m\u00f3dulo:</p> <pre><code>app/\n\u2514\u2500\u2500 soil_analysis/\n    \u251c\u2500\u2500 application/\n    \u2502   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 domain/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 schemas.py\n    \u2514\u2500\u2500 infrastructure/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 api.py\n        \u251c\u2500\u2500 orm_models.py\n        \u2514\u2500\u2500 sql_repository.py\n</code></pre>"},{"location":"guides/getting_started/#2-definicion-de-esquemas-domainschemaspy","title":"2. Definici\u00f3n de Esquemas (domain/schemas.py)","text":"<pre><code>from pydantic import BaseModel, Field\nfrom datetime import date\nfrom typing import Optional\n\nclass SoilAnalysisBase(BaseModel):\n    lote_id: int\n    fecha_analisis: date\n    ph: float = Field(..., ge=0, le=14)\n    materia_organica: float = Field(..., ge=0, le=100)\n    nitrogeno: float = Field(..., ge=0)\n    fosforo: float = Field(..., ge=0)\n    potasio: float = Field(..., ge=0)\n    observaciones: Optional[str] = None\n\nclass SoilAnalysisCreate(SoilAnalysisBase):\n    pass\n\nclass SoilAnalysisResponse(SoilAnalysisBase):\n    id: int\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"guides/getting_started/#3-definicion-de-modelos-orm-infrastructureorm_modelspy","title":"3. Definici\u00f3n de Modelos ORM (infrastructure/orm_models.py)","text":"<pre><code>from sqlalchemy import Column, Integer, Float, Date, ForeignKey, Text\nfrom app.infrastructure.database.database import Base\n\nclass SoilAnalysis(Base):\n    __tablename__ = \"analisis_suelo\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    lote_id = Column(Integer, ForeignKey(\"lote.id\"), nullable=False)\n    fecha_analisis = Column(Date, nullable=False)\n    ph = Column(Float, nullable=False)\n    materia_organica = Column(Float, nullable=False)\n    nitrogeno = Column(Float, nullable=False)\n    fosforo = Column(Float, nullable=False)\n    potasio = Column(Float, nullable=False)\n    observaciones = Column(Text)\n</code></pre>"},{"location":"guides/getting_started/#4-implementacion-del-repositorio-infrastructuresql_repositorypy","title":"4. Implementaci\u00f3n del Repositorio (infrastructure/sql_repository.py)","text":"<pre><code>from sqlalchemy.orm import Session\nfrom app.soil_analysis.infrastructure.orm_models import SoilAnalysis\nfrom app.soil_analysis.domain.schemas import SoilAnalysisCreate\n\nclass SoilAnalysisRepository:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def create_soil_analysis(self, soil_analysis: SoilAnalysisCreate) -&gt; SoilAnalysis:\n        db_soil_analysis = SoilAnalysis(**soil_analysis.model_dump())\n        self.db.add(db_soil_analysis)\n        self.db.commit()\n        self.db.refresh(db_soil_analysis)\n        return db_soil_analysis\n\n    def get_soil_analysis(self, soil_analysis_id: int) -&gt; SoilAnalysis:\n        return self.db.query(SoilAnalysis).filter(SoilAnalysis.id == soil_analysis_id).first()\n\n    def get_soil_analyses_by_lote(self, lote_id: int):\n        return self.db.query(SoilAnalysis).filter(SoilAnalysis.lote_id == lote_id).all()\n</code></pre>"},{"location":"guides/getting_started/#5-implementacion-del-caso-de-uso-applicationcreate_soil_analysis_use_casepy","title":"5. Implementaci\u00f3n del Caso de Uso (application/create_soil_analysis_use_case.py)","text":"<pre><code>from sqlalchemy.orm import Session\nfrom app.soil_analysis.infrastructure.sql_repository import SoilAnalysisRepository\nfrom app.soil_analysis.domain.schemas import SoilAnalysisCreate, SoilAnalysisResponse\nfrom app.infrastructure.common.common_exceptions import DomainException\nfrom app.user.domain.schemas import UserInDB\nfrom fastapi import status\n\nclass CreateSoilAnalysisUseCase:\n    def __init__(self, db: Session):\n        self.db = db\n        self.soil_analysis_repository = SoilAnalysisRepository(db)\n\n    def execute(self, soil_analysis_data: SoilAnalysisCreate, current_user: UserInDB) -&gt; SoilAnalysisResponse:\n        if not self.user_can_create_soil_analysis(current_user):\n            raise DomainException(\n                message=\"No tienes permisos para crear un an\u00e1lisis de suelo.\",\n                status_code=status.HTTP_403_FORBIDDEN\n            )\n\n        # Aqu\u00ed podr\u00edas agregar m\u00e1s validaciones, como verificar si el lote existe y pertenece al usuario\n\n        soil_analysis = self.soil_analysis_repository.create_soil_analysis(soil_analysis_data)\n        return SoilAnalysisResponse.model_validate(soil_analysis)\n\n    def user_can_create_soil_analysis(self, user: UserInDB) -&gt; bool:\n        allowed_roles = [\"Superusuario\", \"Administrador de Finca\", \"Agr\u00f3nomo\"]\n        return any(role.nombre in allowed_roles for role in user.roles)\n</code></pre>"},{"location":"guides/getting_started/#6-definicion-de-la-api-infrastructureapipy","title":"6. Definici\u00f3n de la API (infrastructure/api.py)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom app.infrastructure.database.database import getDb\nfrom app.soil_analysis.domain.schemas import SoilAnalysisCreate, SoilAnalysisResponse\nfrom app.soil_analysis.application.create_soil_analysis_use_case import CreateSoilAnalysisUseCase\nfrom app.infrastructure.security.security_utils import get_current_user\nfrom app.user.domain.schemas import UserInDB\n\nrouter = APIRouter(prefix=\"/soil-analysis\", tags=[\"Soil Analysis\"])\n\n@router.post(\"/\", response_model=SoilAnalysisResponse)\ndef create_soil_analysis(\n    soil_analysis: SoilAnalysisCreate,\n    db: Session = Depends(getDb),\n    current_user: UserInDB = Depends(get_current_user)\n):\n    use_case = CreateSoilAnalysisUseCase(db)\n    try:\n        return use_case.execute(soil_analysis, current_user)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, \n            detail=f\"Error interneo al crear el an\u00e1lisis de suelo: {str(e)}\"\n            )\n</code></pre>"},{"location":"guides/getting_started/#7-integracion-con-el-sistema-principal-mainpy","title":"7. Integraci\u00f3n con el Sistema Principal (main.py)","text":"<p>Finalmente, incluimos el router del nuevo m\u00f3dulo en el archivo principal de la aplicaci\u00f3n:</p> <pre><code>from fastapi import FastAPI\nfrom app.soil_analysis.infrastructure.api import router as soil_analysis_router\n\napp = FastAPI()\n\n# ... otros imports y configuraciones ...\n\napp.include_router(soil_analysis_router)\n</code></pre>"},{"location":"guides/getting_started/#uso-de-servicios-comunes","title":"Uso de Servicios Comunes","text":"<p>En este ejemplo, hemos utilizado varios servicios y componentes comunes del proyecto:</p> <ol> <li>Base de datos: Utilizamos la sesi\u00f3n de base de datos proporcionada por <code>getDb()</code>.</li> <li>Autenticaci\u00f3n: Usamos <code>get_current_user()</code> para obtener el usuario autenticado.</li> <li>Manejo de excepciones: Empleamos <code>DomainException</code> para errores de dominio personalizados.</li> <li>Modelos ORM: Extendemos <code>Base</code> de SQLAlchemy para nuestro modelo ORM.</li> <li>Validaci\u00f3n de datos: Utilizamos Pydantic para la validaci\u00f3n de datos de entrada y salida.</li> </ol>"},{"location":"guides/getting_started/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de FastAPI</li> <li>Documentaci\u00f3n de SQLAlchemy</li> <li>Gu\u00eda de Railway para despliegue</li> <li>Documentaci\u00f3n de TensorFlow</li> </ul>"},{"location":"guides/getting_started/#soporte","title":"Soporte","text":"<p>Si encuentras alg\u00fan problema o tienes preguntas, no dudes en contactar al equipo de desarrollo a trav\u00e9s del canal #backend-support en Slack.</p> <p>\u00a1Bienvenido al equipo y feliz codificaci\u00f3n!</p>"},{"location":"guides/installation/","title":"Gu\u00eda de Instalaci\u00f3n de AgroInsight","text":"<p>Esta gu\u00eda proporciona instrucciones detalladas para configurar el entorno de desarrollo del proyecto AgroInsight. Sigue cada paso cuidadosamente para asegurar una instalaci\u00f3n correcta y completa.</p>"},{"location":"guides/installation/#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener instalado lo siguiente:</p> <ol> <li>Python 3.12 o superior: Descarga e instala desde python.org.</li> <li>VS Code: Descarga e instala desde code.visualstudio.com.</li> <li>MySQL 8.0: Descarga e instala desde dev.mysql.com.</li> <li>MySQL Workbench: Descarga e instala desde dev.mysql.com.</li> <li>pip: Generalmente se instala con Python. Verifica con <code>pip --version</code>.</li> <li>Poetry: Instala ejecutando <code>pip install poetry</code>.</li> <li>Git: Descarga e instala desde git-scm.com.</li> <li>Cuenta de GitHub: Crea una cuenta en github.com.</li> <li>Docker Desktop: Descarga e instala desde docker.com.</li> </ol>"},{"location":"guides/installation/#pasos-de-instalacion-del-proyecto","title":"Pasos de Instalaci\u00f3n del proyecto","text":""},{"location":"guides/installation/#1-clonar-los-repositorios","title":"1. Clonar los Repositorios","text":"<pre><code>git clone https://github.com/DavidValenciaX/agroinsight-backend.git\ncd agroinsight-backend\n</code></pre>"},{"location":"guides/installation/#2-configurar-el-entorno-virtual-para-el-backend","title":"2. Configurar el Entorno Virtual para el Backend","text":"<pre><code>poetry config virtualenvs.in-project true\npoetry install\n</code></pre>"},{"location":"guides/installation/#3-instalar-dependencias-del-backend","title":"3. Instalar Dependencias del Backend","text":"<pre><code>poetry install\n</code></pre>"},{"location":"guides/installation/#4-configurar-variables-de-entorno","title":"4. Configurar Variables de Entorno","text":"<p>Crea un archivo <code>.env</code> en la ra\u00edz del proyecto backend y a\u00f1ade las siguientes variables:</p> <pre><code>MYSQL_PUBLIC_URL=mysql://user:password@host:port/database\nSECRET_KEY=tu_clave_secreta\nGMAIL_USER=tu_correo@gmail.com\nGMAIL_APP_PASSWORD=tu_contrase\u00f1a_de_aplicacion\n</code></pre> <p>Solicita los valores reales a un miembro del equipo.</p>"},{"location":"guides/installation/#5-correr-el-servidor-backend","title":"5. Correr el servidor Backend","text":"<pre><code>poetry run uvicorn app.main:app --reload\n</code></pre>"},{"location":"guides/installation/#verificacion-de-la-instalacion","title":"Verificaci\u00f3n de la Instalaci\u00f3n","text":"<ol> <li>Backend: Visita <code>http://localhost:8000/docs</code> para ver la documentaci\u00f3n Swagger de la API.</li> </ol>"},{"location":"guides/installation/#solucion-de-problemas-comunes","title":"Soluci\u00f3n de Problemas Comunes","text":"<ul> <li>Problemas con dependencias de Python: Aseg\u00farate de usar Python 3.12 y que el entorno virtual est\u00e9 activado.</li> <li>Errores de base de datos: Verifica que el contenedor Docker de MySQL est\u00e9 corriendo y las credenciales en <code>.env</code> sean correctas.</li> <li>Problemas con TensorFlow o OpenCV: Aseg\u00farate de que tu sistema cumple con los requisitos de hardware para IA.</li> </ul>"},{"location":"guides/installation/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<ul> <li>Revisa la Gu\u00eda de Inicio R\u00e1pido para comenzar a desarrollar.</li> <li>Familiar\u00edzate con la estructura del proyecto y los est\u00e1ndares de c\u00f3digo.</li> <li>Configura tu entorno de desarrollo siguiendo las mejores pr\u00e1cticas del equipo.</li> </ul> <p>Para cualquier problema adicional, consulta la secci\u00f3n de FAQ o contacta al equipo de desarrollo a trav\u00e9s de Slack.</p>"},{"location":"plot/endpoints/","title":"endpoints","text":"<p>Contenido para docs\\plot\\endpoints.md</p>"},{"location":"plot/models/","title":"models","text":"<p>Contenido para docs\\plot\\models.md</p>"},{"location":"plot/overview/","title":"overview","text":"<p>Contenido para docs\\plot\\overview.md</p>"},{"location":"plot/use_cases/","title":"use_cases","text":"<p>Contenido para docs\\plot\\use_cases.md</p>"},{"location":"user/endpoints/","title":"Endpoints de Usuario","text":"<p>Este documento describe los endpoints disponibles para la gesti\u00f3n de usuarios en el sistema AgroInsight.</p>"},{"location":"user/endpoints/#autenticacion-y-autorizacion","title":"Autenticaci\u00f3n y Autorizaci\u00f3n","text":""},{"location":"user/endpoints/#registro-de-usuario","title":"Registro de Usuario","text":"<p>Registra un nuevo usuario en el sistema.</p> <p>Este endpoint recibe los datos de un nuevo usuario, los valida, y si todo es correcto, crea una nueva cuenta de usuario en el sistema.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserCreate</code> <p>Datos del usuario a registrar.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse con un mensaje indicando que el usuario fue registrado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el registro, como datos inv\u00e1lidos o un usuario ya existente.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/create\", response_model=SuccessResponse, status_code=status.HTTP_201_CREATED)\ndef create_user(\n    user: UserCreate,\n    db: Session = Depends(getDb),\n):\n    \"\"\"\n    Registra un nuevo usuario en el sistema.\n\n    Este endpoint recibe los datos de un nuevo usuario, los valida, y si todo es correcto,\n    crea una nueva cuenta de usuario en el sistema.\n\n    Parameters:\n        user (UserCreate): Datos del usuario a registrar.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse con un mensaje indicando que el usuario fue registrado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el registro, como datos inv\u00e1lidos o un usuario ya existente.\n    \"\"\"\n    creation_use_case = UserCreationUseCase(db)\n    # Llamamos al caso de uso sin manejar excepciones aqu\u00ed\n    try:\n        return creation_use_case.execute(user)\n    except (DomainException, UserStateException) as e:\n        # Permite que los manejadores de excepciones globales de FastAPI manejen las excepciones\n        raise e\n    except Exception as e:\n        # Para cualquier otra excepci\u00f3n no esperada, lanza un error HTTP 500 gen\u00e9rico\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno en el registro de usuario: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#confirmacion-de-registro","title":"Confirmaci\u00f3n de Registro","text":"<p>Confirma el registro de un usuario utilizando un PIN.</p> <p>Parameters:</p> Name Type Description Default <code>confirmation</code> <code>ConfirmationRequest</code> <p>Datos de confirmaci\u00f3n del usuario.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el registro fue confirmado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la confirmaci\u00f3n del registro.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/confirm\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef confirm_user_registration(\n    confirmation: ConfirmationRequest,\n    db: Session = Depends(getDb)\n):\n    \"\"\"\n    Confirma el registro de un usuario utilizando un PIN.\n\n    Parameters:\n        confirmation (ConfirmationRequest): Datos de confirmaci\u00f3n del usuario.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el registro fue confirmado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la confirmaci\u00f3n del registro.\n    \"\"\"\n    confirmation_use_case = ConfirmationUseCase(db)\n    try:\n        return confirmation_use_case.execute(confirmation.email, confirmation.pin)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al confirmar el registro de usuario: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#reenvio-de-pin-de-confirmacion","title":"Reenv\u00edo de PIN de Confirmaci\u00f3n","text":"<p>Reenv\u00eda el PIN de confirmaci\u00f3n al correo electr\u00f3nico del usuario.</p> <p>Parameters:</p> Name Type Description Default <code>resend_request</code> <code>ResendPinConfirmRequest</code> <p>Solicitud de reenv\u00edo de PIN.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el PIN fue reenviado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el reenv\u00edo del PIN.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/resend-confirm-pin\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef resend_confirmation_pin_endpoint(\n    resend_request: ResendPinConfirmRequest,\n    db: Session = Depends(getDb)\n):\n    \"\"\"\n    Reenv\u00eda el PIN de confirmaci\u00f3n al correo electr\u00f3nico del usuario.\n\n    Parameters:\n        resend_request (ResendPinConfirmRequest): Solicitud de reenv\u00edo de PIN.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el PIN fue reenviado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el reenv\u00edo del PIN.\n    \"\"\"\n    resend_confirmation_use_case = ResendConfirmationUseCase(db)\n    try:\n        return resend_confirmation_use_case.execute(resend_request.email)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al reenviar el PIN de confirmaci\u00f3n: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#inicio-de-sesion","title":"Inicio de Sesi\u00f3n","text":"<p>Inicia sesi\u00f3n y obtiene un token de acceso.</p> <p>Parameters:</p> Name Type Description Default <code>login_request</code> <code>LoginRequest</code> <p>Datos de inicio de sesi\u00f3n del usuario.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse con el token de acceso.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el inicio de sesi\u00f3n.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/login\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef login_for_access_token(login_request: LoginRequest, db: Session = Depends(getDb)):\n    \"\"\"\n    Inicia sesi\u00f3n y obtiene un token de acceso.\n\n    Parameters:\n        login_request (LoginRequest): Datos de inicio de sesi\u00f3n del usuario.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse con el token de acceso.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el inicio de sesi\u00f3n.\n    \"\"\"\n    login_use_case = LoginUseCase(db)\n    try:\n        return login_use_case.execute(login_request.email, login_request.password)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al procesar el inicio de sesi\u00f3n: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#verificacion-de-autenticacion-de-dos-factores","title":"Verificaci\u00f3n de Autenticaci\u00f3n de Dos Factores","text":"<p>Verifica el inicio de sesi\u00f3n utilizando autenticaci\u00f3n de dos factores.</p> <p>Parameters:</p> Name Type Description Default <code>auth_request</code> <code>TwoFactorAuthRequest</code> <p>Datos de autenticaci\u00f3n de dos factores.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>TokenResponse</code> <p>Un objeto TokenResponse con el token de acceso.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la verificaci\u00f3n del inicio de sesi\u00f3n.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/login/verify\", response_model=TokenResponse, status_code=status.HTTP_200_OK)\ndef verify_login(auth_request: TwoFactorAuthRequest, db: Session = Depends(getDb)):\n    \"\"\"\n    Verifica el inicio de sesi\u00f3n utilizando autenticaci\u00f3n de dos factores.\n\n    Parameters:\n        auth_request (TwoFactorAuthRequest): Datos de autenticaci\u00f3n de dos factores.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        TokenResponse: Un objeto TokenResponse con el token de acceso.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la verificaci\u00f3n del inicio de sesi\u00f3n.\n    \"\"\"\n    verify_use_case = VerifyUseCase(db)\n    try:\n        # Ejecuta el caso de uso y obtiene los datos del token\n        return verify_use_case.execute(auth_request.email, auth_request.pin)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al verificar el inicio de sesi\u00f3n: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#reenvio-de-pin-de-autenticacion-de-dos-factores","title":"Reenv\u00edo de PIN de Autenticaci\u00f3n de Dos Factores","text":"<p>Reenv\u00eda el PIN de autenticaci\u00f3n de dos factores al usuario.</p> <p>Parameters:</p> Name Type Description Default <code>resend_request</code> <code>Resend2FARequest</code> <p>Solicitud de reenv\u00edo de PIN de 2FA.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el PIN de 2FA fue reenviado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el reenv\u00edo del PIN de 2FA.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/resend-2fa-pin\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef resend_2fa_pin_endpoint(\n    resend_request: Resend2FARequest,\n    db: Session = Depends(getDb)\n):\n    \"\"\"\n    Reenv\u00eda el PIN de autenticaci\u00f3n de dos factores al usuario.\n\n    Parameters:\n        resend_request (Resend2FARequest): Solicitud de reenv\u00edo de PIN de 2FA.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el PIN de 2FA fue reenviado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el reenv\u00edo del PIN de 2FA.\n    \"\"\"\n    resend_2fa_use_case = Resend2faUseCase(db)\n    try:\n        return resend_2fa_use_case.execute(resend_request.email)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al reenviar el PIN de doble factor de autenticaci\u00f3n: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#cierre-de-sesion","title":"Cierre de Sesi\u00f3n","text":"<p>Cierra la sesi\u00f3n del usuario actual.</p> <p>Parameters:</p> Name Type Description Default <code>current_user</code> <code>UserInDB</code> <p>Usuario actual autenticado.</p> <code>Depends(get_current_user)</code> <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <code>credentials</code> <code>HTTPAuthorizationCredentials</code> <p>Credenciales de autorizaci\u00f3n HTTP.</p> <code>Security(security_scheme)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que la sesi\u00f3n fue cerrada exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el cierre de sesi\u00f3n.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/logout\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef logout(\n    current_user: UserInDB = Depends(get_current_user),\n    db: Session = Depends(getDb),\n    credentials: HTTPAuthorizationCredentials = Security(security_scheme)\n):\n    \"\"\"\n    Cierra la sesi\u00f3n del usuario actual.\n\n    Parameters:\n        current_user (UserInDB): Usuario actual autenticado.\n        db (Session): Sesi\u00f3n de base de datos.\n        credentials (HTTPAuthorizationCredentials): Credenciales de autorizaci\u00f3n HTTP.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que la sesi\u00f3n fue cerrada exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el cierre de sesi\u00f3n.\n    \"\"\"\n    token = credentials.credentials\n    logout_use_case = LogoutUseCase(db)\n    try:\n        return logout_use_case.execute(token, current_user.id)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"No se pudo cerrar la sesi\u00f3n: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#gestion-de-contrasenas","title":"Gesti\u00f3n de Contrase\u00f1as","text":""},{"location":"user/endpoints/#recuperacion-de-contrasena","title":"Recuperaci\u00f3n de Contrase\u00f1a","text":"<p>Inicia el proceso de recuperaci\u00f3n de contrase\u00f1a para un usuario.</p> <p>Parameters:</p> Name Type Description Default <code>recovery_request</code> <code>PasswordRecoveryRequest</code> <p>Solicitud de recuperaci\u00f3n de contrase\u00f1a.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el proceso de recuperaci\u00f3n fue iniciado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el inicio del proceso de recuperaci\u00f3n.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/password-recovery\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef initiate_password_recovery(\n    recovery_request: PasswordRecoveryRequest,\n    db: Session = Depends(getDb)\n):\n    \"\"\"\n    Inicia el proceso de recuperaci\u00f3n de contrase\u00f1a para un usuario.\n\n    Parameters:\n        recovery_request (PasswordRecoveryRequest): Solicitud de recuperaci\u00f3n de contrase\u00f1a.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el proceso de recuperaci\u00f3n fue iniciado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el inicio del proceso de recuperaci\u00f3n.\n    \"\"\"\n    password_recovery_use_case = PasswordRecoveryUseCase(db)\n    try:\n        return password_recovery_use_case.execute(recovery_request.email)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al iniciar el proceso de recuperaci\u00f3n de contrase\u00f1a: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#confirmacion-de-pin-de-recuperacion","title":"Confirmaci\u00f3n de PIN de Recuperaci\u00f3n","text":"<p>Confirma el PIN de recuperaci\u00f3n de contrase\u00f1a.</p> <p>Parameters:</p> Name Type Description Default <code>pin_confirmation</code> <code>PinConfirmationRequest</code> <p>Datos de confirmaci\u00f3n del PIN de recuperaci\u00f3n.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el PIN de recuperaci\u00f3n fue confirmado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la confirmaci\u00f3n del PIN de recuperaci\u00f3n.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/confirm-recovery-pin\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef confirm_recovery_pin(\n    pin_confirmation: PinConfirmationRequest,\n    db: Session = Depends(getDb)\n):\n    \"\"\"\n    Confirma el PIN de recuperaci\u00f3n de contrase\u00f1a.\n\n    Parameters:\n        pin_confirmation (PinConfirmationRequest): Datos de confirmaci\u00f3n del PIN de recuperaci\u00f3n.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el PIN de recuperaci\u00f3n fue confirmado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la confirmaci\u00f3n del PIN de recuperaci\u00f3n.\n    \"\"\"\n    password_recovery_use_case = ConfirmRecoveryPinUseCase(db)\n    try:\n        return password_recovery_use_case.execute(pin_confirmation.email, pin_confirmation.pin)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error al confirmar el PIN de recuperaci\u00f3n: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#reenvio-de-pin-de-recuperacion","title":"Reenv\u00edo de PIN de Recuperaci\u00f3n","text":"<p>Reenv\u00eda el PIN de recuperaci\u00f3n de contrase\u00f1a al usuario.</p> <p>Parameters:</p> Name Type Description Default <code>recovery_request</code> <code>PasswordRecoveryRequest</code> <p>Solicitud de reenv\u00edo de PIN de recuperaci\u00f3n.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el PIN de recuperaci\u00f3n fue reenviado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el reenv\u00edo del PIN de recuperaci\u00f3n.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/resend-recovery-pin\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef resend_recovery_pin(\n    recovery_request: PasswordRecoveryRequest,\n    db: Session = Depends(getDb)\n):\n    \"\"\"\n    Reenv\u00eda el PIN de recuperaci\u00f3n de contrase\u00f1a al usuario.\n\n    Parameters:\n        recovery_request (PasswordRecoveryRequest): Solicitud de reenv\u00edo de PIN de recuperaci\u00f3n.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el PIN de recuperaci\u00f3n fue reenviado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el reenv\u00edo del PIN de recuperaci\u00f3n.\n    \"\"\"\n    password_recovery_use_case = ResendRecoveryUseCase(db)\n    try:\n        return password_recovery_use_case.execute(recovery_request.email)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno en el reenvio del PIN de recuperaci\u00f3n de contrase\u00f1a: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#restablecimiento-de-contrasena","title":"Restablecimiento de Contrase\u00f1a","text":"<p>Restablece la contrase\u00f1a de un usuario.</p> <p>Parameters:</p> Name Type Description Default <code>reset_request</code> <code>PasswordResetRequest</code> <p>Solicitud de restablecimiento de contrase\u00f1a.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que la contrase\u00f1a fue restablecida exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante el restablecimiento de la contrase\u00f1a.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\"/reset-password\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef reset_password(\n    reset_request: PasswordResetRequest,\n    db: Session = Depends(getDb)\n):\n    \"\"\"\n    Restablece la contrase\u00f1a de un usuario.\n\n    Parameters:\n        reset_request (PasswordResetRequest): Solicitud de restablecimiento de contrase\u00f1a.\n        db (Session): Sesi\u00f3n de base de datos.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que la contrase\u00f1a fue restablecida exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante el restablecimiento de la contrase\u00f1a.\n    \"\"\"\n    password_recovery_use_case = ResetPasswordUseCase(db)\n    try:\n        return password_recovery_use_case.execute(reset_request.email, reset_request.new_password)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al reestablecer la contrase\u00f1a: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#gestion-de-perfil-de-usuario","title":"Gesti\u00f3n de Perfil de Usuario","text":""},{"location":"user/endpoints/#obtener-usuario-actual","title":"Obtener Usuario Actual","text":"Source code in <code>app\\infrastructure\\security\\jwt_middleware.py</code> <pre><code>def get_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Security(security_scheme),\n    db: Session = Depends(getDb)\n):\n    if credentials is None:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Se requiere un token de autenticaci\u00f3n\")\n\n    token = credentials.credentials\n    user_repository = UserRepository(db)\n\n    # Verificar si el token est\u00e1 en la lista negra\n    if user_repository.is_token_blacklisted(token):\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Token inv\u00e1lido o ya ha sido cerrada la sesi\u00f3n.\")\n\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        email: str = payload.get(\"sub\")\n        if email is None:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"No se pudieron validar las credenciales.\")\n        exp = payload.get(\"exp\")\n        if exp is None:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"El token no tiene expiraci\u00f3n.\")\n        if datetime.fromtimestamp(exp, tz=timezone.utc) &lt; datetime.now(timezone.utc):\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"El token ha expirado.\")\n    except JWTError:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"No se pudieron validar las credenciales.\")\n\n    user = user_repository.get_user_by_email(email)\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"La cuenta con este email no est\u00e1 registrada\")\n    return user\n</code></pre>"},{"location":"user/endpoints/#actualizar-informacion-de-usuario","title":"Actualizar Informaci\u00f3n de Usuario","text":"<p>Actualiza la informaci\u00f3n del usuario actual.</p> <p>Parameters:</p> Name Type Description Default <code>user_update</code> <code>UserUpdate</code> <p>Datos de actualizaci\u00f3n del usuario.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <code>current_user</code> <code>UserInDB</code> <p>Usuario actual autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que la informaci\u00f3n fue actualizada exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la actualizaci\u00f3n de la informaci\u00f3n del usuario.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.put(\"/me/update\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef update_user_info(\n    user_update: UserUpdate,\n    db: Session = Depends(getDb),\n    current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Actualiza la informaci\u00f3n del usuario actual.\n\n    Parameters:\n        user_update (UserUpdate): Datos de actualizaci\u00f3n del usuario.\n        db (Session): Sesi\u00f3n de base de datos.\n        current_user (UserInDB): Usuario actual autenticado.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que la informaci\u00f3n fue actualizada exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la actualizaci\u00f3n de la informaci\u00f3n del usuario.\n    \"\"\"\n    update_use_case = UpdateUserInfoUseCase(db)\n    try:\n        return update_use_case.execute(current_user, user_update)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"No se pudo actualizar la informaci\u00f3n del usuario: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#administracion-de-usuarios","title":"Administraci\u00f3n de Usuarios","text":""},{"location":"user/endpoints/#crear-usuario-por-administrador","title":"Crear Usuario por Administrador","text":"<p>Crea un nuevo usuario en el sistema por un administrador.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserCreateByAdmin</code> <p>Datos del usuario a crear.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <code>current_user</code> <code>UserInDB</code> <p>Usuario actual autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el usuario fue creado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la creaci\u00f3n del usuario.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.post(\n    \"/admin/create\", response_model=SuccessResponse, status_code=status.HTTP_201_CREATED\n)\ndef create_user_by_admin(\n    user: UserCreateByAdmin,\n    db: Session = Depends(getDb),\n    current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Crea un nuevo usuario en el sistema por un administrador.\n\n    Parameters:\n        user (UserCreateByAdmin): Datos del usuario a crear.\n        db (Session): Sesi\u00f3n de base de datos.\n        current_user (UserInDB): Usuario actual autenticado.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el usuario fue creado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la creaci\u00f3n del usuario.\n    \"\"\"\n    user_creation_by_admin_use_case = UserCreationByAdminUseCase(db)\n    try:\n        return user_creation_by_admin_use_case.execute(user, current_user)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno en el registro de usuario por el administrador: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#obtener-usuario-por-id","title":"Obtener Usuario por ID","text":"<p>Obtiene la informaci\u00f3n de un usuario por su ID.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>ID del usuario a obtener.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <code>current_user</code> <code>UserInDB</code> <p>Usuario actual autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>UserResponse</code> <p>Un objeto UserResponse con la informaci\u00f3n del usuario.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la obtenci\u00f3n del usuario.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.get(\"/{user_id}\", response_model=UserResponse, status_code=status.HTTP_200_OK)\ndef get_user_by_id(user_id: int, db: Session = Depends(getDb), current_user=Depends(get_current_user)):\n    \"\"\"\n    Obtiene la informaci\u00f3n de un usuario por su ID.\n\n    Parameters:\n        user_id (int): ID del usuario a obtener.\n        db (Session): Sesi\u00f3n de base de datos.\n        current_user (UserInDB): Usuario actual autenticado.\n\n    Returns:\n        UserResponse: Un objeto UserResponse con la informaci\u00f3n del usuario.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la obtenci\u00f3n del usuario.\n    \"\"\"\n    get_user_by_id_use_case = GetUserByIdUseCase(db)\n    try:\n        return get_user_by_id_use_case.execute(user_id, current_user)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al obtener el usuario: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#listar-usuarios","title":"Listar Usuarios","text":"<p>Lista todos los usuarios en el sistema.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <code>current_user</code> <code>UserInDB</code> <p>Usuario actual autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Type Description <p>List[UserResponse]: Una lista de objetos UserResponse representando a los usuarios.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la obtenci\u00f3n de la lista de usuarios.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.get(\"/list\", response_model=List[UserResponse], status_code=status.HTTP_200_OK)\ndef list_users(db: Session = Depends(getDb), current_user=Depends(get_current_user)):\n    \"\"\"\n    Lista todos los usuarios en el sistema.\n\n    Parameters:\n        db (Session): Sesi\u00f3n de base de datos.\n        current_user (UserInDB): Usuario actual autenticado.\n\n    Returns:\n        List[UserResponse]: Una lista de objetos UserResponse representando a los usuarios.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la obtenci\u00f3n de la lista de usuarios.\n    \"\"\"\n    list_users_use_case = ListUsersUseCase(db)\n    try:\n        return list_users_use_case.execute(current_user)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error interno al listar los usuarios: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#actualizar-usuario-por-administrador","title":"Actualizar Usuario por Administrador","text":"<p>Actualiza la informaci\u00f3n de un usuario por un administrador.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>ID del usuario a actualizar.</p> required <code>user_update</code> <code>AdminUserUpdate</code> <p>Datos de actualizaci\u00f3n del usuario.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <code>current_user</code> <code>UserInDB</code> <p>Usuario actual autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>UserResponse</code> <p>Un objeto UserResponse con la informaci\u00f3n actualizada del usuario.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la actualizaci\u00f3n del usuario.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.put(\"/{user_id}/update\", response_model=UserResponse, status_code=status.HTTP_200_OK)\ndef admin_update_user(\n    user_id: int,\n    user_update: AdminUserUpdate,\n    db: Session = Depends(getDb),\n    current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Actualiza la informaci\u00f3n de un usuario por un administrador.\n\n    Parameters:\n        user_id (int): ID del usuario a actualizar.\n        user_update (AdminUserUpdate): Datos de actualizaci\u00f3n del usuario.\n        db (Session): Sesi\u00f3n de base de datos.\n        current_user (UserInDB): Usuario actual autenticado.\n\n    Returns:\n        UserResponse: Un objeto UserResponse con la informaci\u00f3n actualizada del usuario.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la actualizaci\u00f3n del usuario.\n    \"\"\"\n    update_user_use_case = AdminUpdateUserUseCase(db)\n    try:\n        return update_user_use_case.execute(user_id, user_update, current_user)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"No se pudo actualizar la informaci\u00f3n del usuario: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/endpoints/#eliminar-usuario","title":"Eliminar Usuario","text":"<p>Desactiva un usuario en el sistema.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>ID del usuario a desactivar.</p> required <code>db</code> <code>Session</code> <p>Sesi\u00f3n de base de datos.</p> <code>Depends(getDb)</code> <code>current_user</code> <code>UserInDB</code> <p>Usuario actual autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <p>Un objeto SuccessResponse indicando que el usuario fue desactivado exitosamente.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Si ocurre un error durante la desactivaci\u00f3n del usuario.</p> Source code in <code>app\\user\\infrastructure\\api.py</code> <pre><code>@router.delete(\"/{user_id}/deactivate\", response_model=SuccessResponse, status_code=status.HTTP_200_OK)\ndef deactivate_user(\n    user_id: int, \n    db: Session = Depends(getDb), \n    current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Desactiva un usuario en el sistema.\n\n    Parameters:\n        user_id (int): ID del usuario a desactivar.\n        db (Session): Sesi\u00f3n de base de datos.\n        current_user (UserInDB): Usuario actual autenticado.\n\n    Returns:\n        SuccessResponse: Un objeto SuccessResponse indicando que el usuario fue desactivado exitosamente.\n\n    Raises:\n        HTTPException: Si ocurre un error durante la desactivaci\u00f3n del usuario.\n    \"\"\"\n    deactivate_use_case = DeactivateUserUseCase(db)\n    try:\n        return deactivate_use_case.execute(user_id, current_user)\n    except (DomainException, UserStateException) as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"No se pudo eliminar el usuario: {str(e)}\"\n        )\n</code></pre>"},{"location":"user/models/","title":"Modelos de Usuario","text":"<p>Este documento describe los modelos ORM utilizados para la gesti\u00f3n de usuarios en el sistema AgroInsight.</p>"},{"location":"user/models/#modelos-de-base-de-datos","title":"Modelos de Base de Datos","text":""},{"location":"user/models/#usuario","title":"Usuario","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'usuario' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.User--atributos","title":"Atributos:","text":"<ul> <li>id (int): Identificador \u00fanico del usuario.</li> <li>nombre (str): Nombre del usuario.</li> <li>apellido (str): Apellido del usuario.</li> <li>email (str): Correo electr\u00f3nico \u00fanico del usuario.</li> <li>password (str): Contrase\u00f1a del usuario.</li> <li>failed_attempts (int): N\u00famero de intentos fallidos de inicio de sesi\u00f3n.</li> <li>locked_until (datetime): Fecha y hora hasta la cual el usuario est\u00e1 bloqueado.</li> <li>state_id (int): Identificador del estado del usuario.</li> <li>roles (List[Role]): Lista de roles asociados al usuario.</li> <li>estado (EstadoUsuario): Estado actual del usuario.</li> <li>confirmacion (ConfirmacionUsuario): Informaci\u00f3n de confirmaci\u00f3n del usuario.</li> <li>verificacion_dos_pasos (VerificacionDospasos): Informaci\u00f3n de verificaci\u00f3n de dos pasos.</li> <li>recuperacion_contrasena (RecuperacionContrasena): Informaci\u00f3n de recuperaci\u00f3n de contrase\u00f1a.</li> <li>blacklisted_tokens (List[BlacklistedToken]): Lista de tokens en lista negra.</li> <li>fincas (List[Finca]): Lista de fincas asociadas al usuario.</li> <li>asignaciones (List[Asignacion]): Lista de asignaciones del usuario.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class User(Base):\n    \"\"\"\n    Representa la tabla 'usuario' en la base de datos.\n\n    Atributos:\n    ----------\n    - **id** (int): Identificador \u00fanico del usuario.\n    - **nombre** (str): Nombre del usuario.\n    - **apellido** (str): Apellido del usuario.\n    - **email** (str): Correo electr\u00f3nico \u00fanico del usuario.\n    - **password** (str): Contrase\u00f1a del usuario.\n    - **failed_attempts** (int): N\u00famero de intentos fallidos de inicio de sesi\u00f3n.\n    - **locked_until** (datetime): Fecha y hora hasta la cual el usuario est\u00e1 bloqueado.\n    - **state_id** (int): Identificador del estado del usuario.\n    - **roles** (List[Role]): Lista de roles asociados al usuario.\n    - **estado** (EstadoUsuario): Estado actual del usuario.\n    - **confirmacion** (ConfirmacionUsuario): Informaci\u00f3n de confirmaci\u00f3n del usuario.\n    - **verificacion_dos_pasos** (VerificacionDospasos): Informaci\u00f3n de verificaci\u00f3n de dos pasos.\n    - **recuperacion_contrasena** (RecuperacionContrasena): Informaci\u00f3n de recuperaci\u00f3n de contrase\u00f1a.\n    - **blacklisted_tokens** (List[BlacklistedToken]): Lista de tokens en lista negra.\n    - **fincas** (List[Finca]): Lista de fincas asociadas al usuario.\n    - **asignaciones** (List[Asignacion]): Lista de asignaciones del usuario.\n    \"\"\"\n    __tablename__ = \"usuario\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(50), index=True)\n    apellido = Column(String(50), index=True)\n    email = Column(String(100), unique=True, index=True)\n    password = Column(String(255))\n    failed_attempts = Column(Integer, default=0)\n    locked_until = Column(DateTime, nullable=True)\n    state_id = Column(Integer, ForeignKey('estado_usuario.id'), nullable=False)\n\n    roles = relationship(\"Role\", secondary=\"usuario_rol\", back_populates=\"users\")\n    estado = relationship(\"EstadoUsuario\")\n    confirmacion = relationship(\"ConfirmacionUsuario\", back_populates=\"usuario\", uselist=False, cascade=CASCADE_DELETE_ORPHAN)\n    verificacion_dos_pasos = relationship(\"VerificacionDospasos\", back_populates=\"usuario\", uselist=False, cascade=CASCADE_DELETE_ORPHAN)\n    recuperacion_contrasena = relationship(\"RecuperacionContrasena\", back_populates=\"usuario\", uselist=False, cascade=CASCADE_DELETE_ORPHAN)\n    blacklisted_tokens = relationship(\"BlacklistedToken\", back_populates=\"usuario\")\n    fincas = relationship(\"Finca\", secondary=\"usuario_finca\", back_populates=\"usuarios\")\n    asignaciones = relationship(\"Asignacion\", back_populates=\"usuario\")\n</code></pre>"},{"location":"user/models/#rol-de-usuario","title":"Rol de Usuario","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'usuario_rol' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.UserRole--atributos","title":"Atributos:","text":"<ul> <li>usuario_id (int): Identificador del usuario.</li> <li>rol_id (int): Identificador del rol.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class UserRole(Base):\n    \"\"\"\n    Representa la tabla 'usuario_rol' en la base de datos.\n\n    Atributos:\n    ----------\n    - **usuario_id** (int): Identificador del usuario.\n    - **rol_id** (int): Identificador del rol.\n    \"\"\"\n    __tablename__ = \"usuario_rol\"\n\n    usuario_id = Column(Integer, ForeignKey(USUARIO_ID), primary_key=True)\n    rol_id = Column(Integer, ForeignKey('rol.id'), primary_key=True)\n</code></pre>"},{"location":"user/models/#rol","title":"Rol","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'rol' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.Role--atributos","title":"Atributos:","text":"<ul> <li>id (int): Identificador \u00fanico del rol.</li> <li>nombre (str): Nombre \u00fanico del rol.</li> <li>descripcion (str): Descripci\u00f3n del rol.</li> <li>users (List[User]): Lista de usuarios asociados al rol.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class Role(Base):\n    \"\"\"\n    Representa la tabla 'rol' en la base de datos.\n\n    Atributos:\n    ----------\n    - **id** (int): Identificador \u00fanico del rol.\n    - **nombre** (str): Nombre \u00fanico del rol.\n    - **descripcion** (str): Descripci\u00f3n del rol.\n    - **users** (List[User]): Lista de usuarios asociados al rol.\n    \"\"\"\n    __tablename__ = \"rol\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(50), unique=True, index=True)\n    descripcion = Column(Text)\n\n    users = relationship(\"User\", secondary=\"usuario_rol\", back_populates=\"roles\")\n</code></pre>"},{"location":"user/models/#estado-de-usuario","title":"Estado de Usuario","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'estado_usuario' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.EstadoUsuario--atributos","title":"Atributos:","text":"<ul> <li>id (int): Identificador \u00fanico del estado.</li> <li>nombre (str): Nombre \u00fanico del estado.</li> <li>descripcion (str): Descripci\u00f3n del estado.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class EstadoUsuario(Base):\n    \"\"\"\n    Representa la tabla 'estado_usuario' en la base de datos.\n\n    Atributos:\n    ----------\n    - **id** (int): Identificador \u00fanico del estado.\n    - **nombre** (str): Nombre \u00fanico del estado.\n    - **descripcion** (str): Descripci\u00f3n del estado.\n    \"\"\"\n    __tablename__ = \"estado_usuario\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(50), unique=True, index=True)\n    descripcion = Column(String(255))\n</code></pre>"},{"location":"user/models/#confirmacion-de-usuario","title":"Confirmaci\u00f3n de Usuario","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'confirmacion_usuario' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.ConfirmacionUsuario--atributos","title":"Atributos:","text":"<ul> <li>id (int): Identificador \u00fanico de la confirmaci\u00f3n.</li> <li>usuario_id (int): Identificador del usuario asociado.</li> <li>pin (str): PIN \u00fanico de confirmaci\u00f3n.</li> <li>expiracion (datetime): Fecha y hora de expiraci\u00f3n del PIN.</li> <li>intentos (int): N\u00famero de intentos de confirmaci\u00f3n.</li> <li>usuario (User): Usuario asociado a la confirmaci\u00f3n.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class ConfirmacionUsuario(Base):\n    \"\"\"\n    Representa la tabla 'confirmacion_usuario' en la base de datos.\n\n    Atributos:\n    ----------\n    - **id** (int): Identificador \u00fanico de la confirmaci\u00f3n.\n    - **usuario_id** (int): Identificador del usuario asociado.\n    - **pin** (str): PIN \u00fanico de confirmaci\u00f3n.\n    - **expiracion** (datetime): Fecha y hora de expiraci\u00f3n del PIN.\n    - **intentos** (int): N\u00famero de intentos de confirmaci\u00f3n.\n    - **usuario** (User): Usuario asociado a la confirmaci\u00f3n.\n    \"\"\"\n    __tablename__ = \"confirmacion_usuario\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    usuario_id = Column(Integer, ForeignKey(USUARIO_ID, ondelete=\"CASCADE\"), nullable=False)\n    pin = Column(String(64), nullable=False, unique=True, index=True)\n    expiracion = Column(DateTime, nullable=False)\n    intentos = Column(Integer, default=0)\n\n    usuario = relationship(\"User\", back_populates=\"confirmacion\")\n</code></pre>"},{"location":"user/models/#verificacion-de-dos-pasos","title":"Verificaci\u00f3n de Dos Pasos","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'verificacion_dos_pasos' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.VerificacionDospasos--atributos","title":"Atributos:","text":"<ul> <li>id (int): Identificador \u00fanico de la verificaci\u00f3n.</li> <li>usuario_id (int): Identificador del usuario asociado.</li> <li>pin (str): PIN \u00fanico de verificaci\u00f3n.</li> <li>expiracion (datetime): Fecha y hora de expiraci\u00f3n del PIN.</li> <li>intentos (int): N\u00famero de intentos de verificaci\u00f3n.</li> <li>usuario (User): Usuario asociado a la verificaci\u00f3n.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class VerificacionDospasos(Base):\n    \"\"\"\n    Representa la tabla 'verificacion_dos_pasos' en la base de datos.\n\n    Atributos:\n    ----------\n    - **id** (int): Identificador \u00fanico de la verificaci\u00f3n.\n    - **usuario_id** (int): Identificador del usuario asociado.\n    - **pin** (str): PIN \u00fanico de verificaci\u00f3n.\n    - **expiracion** (datetime): Fecha y hora de expiraci\u00f3n del PIN.\n    - **intentos** (int): N\u00famero de intentos de verificaci\u00f3n.\n    - **usuario** (User): Usuario asociado a la verificaci\u00f3n.\n    \"\"\"\n    __tablename__ = \"verificacion_dos_pasos\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    usuario_id = Column(Integer, ForeignKey(USUARIO_ID, ondelete=\"CASCADE\"), nullable=False)\n    pin = Column(String(64), nullable=False, unique=True, index=True)\n    expiracion = Column(DateTime, nullable=False)\n    intentos = Column(Integer, default=0)\n\n    usuario = relationship(\"User\", back_populates=\"verificacion_dos_pasos\")\n</code></pre>"},{"location":"user/models/#recuperacion-de-contrasena","title":"Recuperaci\u00f3n de Contrase\u00f1a","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'recuperacion_contrasena' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.RecuperacionContrasena--atributos","title":"Atributos:","text":"<ul> <li>id (int): Identificador \u00fanico de la recuperaci\u00f3n.</li> <li>usuario_id (int): Identificador del usuario asociado.</li> <li>pin (str): PIN \u00fanico de recuperaci\u00f3n.</li> <li>expiracion (datetime): Fecha y hora de expiraci\u00f3n del PIN.</li> <li>intentos (int): N\u00famero de intentos de recuperaci\u00f3n.</li> <li>pin_confirmado (bool): Indica si el PIN ha sido confirmado.</li> <li>usuario (User): Usuario asociado a la recuperaci\u00f3n.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class RecuperacionContrasena(Base):\n    \"\"\"\n    Representa la tabla 'recuperacion_contrasena' en la base de datos.\n\n    Atributos:\n    ----------\n    - **id** (int): Identificador \u00fanico de la recuperaci\u00f3n.\n    - **usuario_id** (int): Identificador del usuario asociado.\n    - **pin** (str): PIN \u00fanico de recuperaci\u00f3n.\n    - **expiracion** (datetime): Fecha y hora de expiraci\u00f3n del PIN.\n    - **intentos** (int): N\u00famero de intentos de recuperaci\u00f3n.\n    - **pin_confirmado** (bool): Indica si el PIN ha sido confirmado.\n    - **usuario** (User): Usuario asociado a la recuperaci\u00f3n.\n    \"\"\"\n    __tablename__ = \"recuperacion_contrasena\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    usuario_id = Column(Integer, ForeignKey(USUARIO_ID, ondelete=\"CASCADE\"), nullable=False)\n    pin = Column(String(64), nullable=False, unique=True, index=True)\n    expiracion = Column(DateTime, nullable=False)\n    intentos = Column(Integer, default=0)\n    pin_confirmado = Column(Boolean, default=False, nullable=False)\n\n    usuario = relationship(\"User\", back_populates=\"recuperacion_contrasena\")\n</code></pre>"},{"location":"user/models/#token-en-lista-negra","title":"Token en Lista Negra","text":"<p>               Bases: <code>Base</code></p> <p>Representa la tabla 'blacklisted_tokens' en la base de datos.</p>"},{"location":"user/models/#app.user.infrastructure.orm_models.BlacklistedToken--atributos","title":"Atributos:","text":"<ul> <li>id (int): Identificador \u00fanico del token en lista negra.</li> <li>token (str): Token \u00fanico en lista negra.</li> <li>blacklisted_at (datetime): Fecha y hora en que el token fue a\u00f1adido a la lista negra.</li> <li>usuario_id (int): Identificador del usuario asociado.</li> <li>usuario (User): Usuario asociado al token en lista negra.</li> </ul> Source code in <code>app\\user\\infrastructure\\orm_models.py</code> <pre><code>class BlacklistedToken(Base):\n    \"\"\"\n    Representa la tabla 'blacklisted_tokens' en la base de datos.\n\n    Atributos:\n    ----------\n    - **id** (int): Identificador \u00fanico del token en lista negra.\n    - **token** (str): Token \u00fanico en lista negra.\n    - **blacklisted_at** (datetime): Fecha y hora en que el token fue a\u00f1adido a la lista negra.\n    - **usuario_id** (int): Identificador del usuario asociado.\n    - **usuario** (User): Usuario asociado al token en lista negra.\n    \"\"\"\n    __tablename__ = \"blacklisted_tokens\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    token = Column(String(500), unique=True, nullable=False, index=True)\n    blacklisted_at = Column(DateTime, default=datetime.now(timezone.utc))\n\n    usuario_id = Column(Integer, ForeignKey(USUARIO_ID), nullable=False)\n    usuario = relationship(\"User\", back_populates=\"blacklisted_tokens\")\n</code></pre>"},{"location":"user/overview/","title":"overview","text":"<p>Contenido para docs\\user\\overview.md</p>"},{"location":"user/schemas/","title":"Modelos de Usuario","text":"<p>Este documento describe los modelos Pydantic utilizados para la gesti\u00f3n de usuarios en el sistema AgroInsight.</p>"},{"location":"user/schemas/#esquemas-de-solicitud-y-respuesta","title":"Esquemas de Solicitud y Respuesta","text":""},{"location":"user/schemas/#crear-usuario","title":"Crear Usuario","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para crear un nuevo usuario.</p>"},{"location":"user/schemas/#app.user.domain.schemas.UserCreate--atributos","title":"Atributos:","text":"<pre><code>- nombre (str): Nombre del usuario.\n- apellido (str): Apellido del usuario.\n- email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n- password (str): Contrase\u00f1a del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class UserCreate(BaseModel):\n    \"\"\"\n    Esquema para crear un nuevo usuario.\n\n    Atributos:\n    ---------\n        - nombre (str): Nombre del usuario.\n        - apellido (str): Apellido del usuario.\n        - email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n        - password (str): Contrase\u00f1a del usuario.\n    \"\"\"\n    email: str\n    nombre: str\n    apellido: str\n    password: str\n\n    _validate_email = field_validator('email')(validate_email)\n    _validate_password = field_validator('password')(validate_password)\n\n    @field_validator('nombre')\n    def validate_nombre(cls, v):\n        if len(v) &lt; 2:\n            raise PydanticCustomError('nombre_validation','El nombre debe tener al menos 2 caracteres.')\n        return v\n\n    @field_validator('apellido')\n    def validate_apellido(cls, v):\n        if len(v) &lt; 2:\n            raise PydanticCustomError('apellido_validation','El apellido debe tener al menos 2 caracteres.')\n        return v\n</code></pre>"},{"location":"user/schemas/#reenvio-de-pin-de-confirmacion","title":"Reenv\u00edo de PIN de Confirmaci\u00f3n","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para solicitar el reenv\u00edo del PIN de confirmaci\u00f3n.</p>"},{"location":"user/schemas/#app.user.domain.schemas.ResendPinConfirmRequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class ResendPinConfirmRequest(BaseModel):\n    \"\"\"\n    Esquema para solicitar el reenv\u00edo del PIN de confirmaci\u00f3n.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n    \"\"\"\n    email: str\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#confirmacion-de-registro","title":"Confirmaci\u00f3n de Registro","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para confirmar el registro de un usuario mediante PIN.</p>"},{"location":"user/schemas/#app.user.domain.schemas.ConfirmationRequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n- pin (str): PIN de confirmaci\u00f3n enviado al correo.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class ConfirmationRequest(BaseModel):\n    \"\"\"\n    Esquema para confirmar el registro de un usuario mediante PIN.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n        - pin (str): PIN de confirmaci\u00f3n enviado al correo.\n    \"\"\"\n    email: str\n    pin: str\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#inicio-de-sesion","title":"Inicio de Sesi\u00f3n","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para solicitar un inicio de sesi\u00f3n.</p>"},{"location":"user/schemas/#app.user.domain.schemas.LoginRequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n- password (str): Contrase\u00f1a del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class LoginRequest(BaseModel):\n    \"\"\"\n    Esquema para solicitar un inicio de sesi\u00f3n.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n        - password (str): Contrase\u00f1a del usuario.\n    \"\"\"\n    email: str\n    password: str\n\n    _validate_email = field_validator('email')(validate_email)\n    _validate_password = field_validator('password')(validate_password)\n</code></pre>"},{"location":"user/schemas/#reenvio-de-pin-de-autenticacion-de-dos-factores","title":"Reenv\u00edo de PIN de Autenticaci\u00f3n de Dos Factores","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para solicitar el reenv\u00edo del PIN de autenticaci\u00f3n de dos factores.</p>"},{"location":"user/schemas/#app.user.domain.schemas.Resend2FARequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class Resend2FARequest(BaseModel):\n    \"\"\"\n    Esquema para solicitar el reenv\u00edo del PIN de autenticaci\u00f3n de dos factores.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n    \"\"\"\n    email: str\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#verificacion-de-inicio-de-sesion-con-dos-factores","title":"Verificaci\u00f3n de Inicio de Sesi\u00f3n con Dos Factores","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para verificar el inicio de sesi\u00f3n con autenticaci\u00f3n de dos factores.</p>"},{"location":"user/schemas/#app.user.domain.schemas.TwoFactorAuthRequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n- pin (str): PIN de autenticaci\u00f3n de dos factores.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class TwoFactorAuthRequest(BaseModel):\n    \"\"\"\n    Esquema para verificar el inicio de sesi\u00f3n con autenticaci\u00f3n de dos factores.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n        - pin (str): PIN de autenticaci\u00f3n de dos factores.\n    \"\"\"\n    email: str\n    pin: str\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#respuesta-de-token","title":"Respuesta de Token","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para la respuesta que contiene el token de acceso.</p>"},{"location":"user/schemas/#app.user.domain.schemas.TokenResponse--atributos","title":"Atributos:","text":"<pre><code>- access_token (str): Token de acceso JWT.\n- token_type (str): Tipo de token, generalmente \"bearer\".\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class TokenResponse(BaseModel):\n    \"\"\"\n    Esquema para la respuesta que contiene el token de acceso.\n\n    Atributos:\n    ---------\n        - access_token (str): Token de acceso JWT.\n        - token_type (str): Tipo de token, generalmente \"bearer\".\n    \"\"\"\n    access_token: str\n    token_type: str\n</code></pre>"},{"location":"user/schemas/#crear-usuario-por-administrador","title":"Crear Usuario por Administrador","text":"<p>               Bases: <code>UserCreate</code></p> <p>Esquema para que un administrador cree un nuevo usuario.</p>"},{"location":"user/schemas/#app.user.domain.schemas.UserCreateByAdmin--atributos","title":"Atributos:","text":"<pre><code>- nombre (str): Nombre del usuario.\n- apellido (str): Apellido del usuario.\n- email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n- password (str): Contrase\u00f1a del usuario.\n- roles (List[int]): Lista de IDs de roles asignados al usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class UserCreateByAdmin(UserCreate):\n    \"\"\"\n    Esquema para que un administrador cree un nuevo usuario.\n\n    Atributos:\n    ---------\n        - nombre (str): Nombre del usuario.\n        - apellido (str): Apellido del usuario.\n        - email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n        - password (str): Contrase\u00f1a del usuario.\n        - roles (List[int]): Lista de IDs de roles asignados al usuario.\n    \"\"\"\n    role_id: int\n</code></pre>"},{"location":"user/schemas/#respuesta-de-usuario","title":"Respuesta de Usuario","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para la respuesta que contiene informaci\u00f3n del usuario.</p>"},{"location":"user/schemas/#app.user.domain.schemas.UserResponse--atributos","title":"Atributos:","text":"<pre><code>- id (int): Identificador \u00fanico del usuario.\n- nombre (str): Nombre del usuario.\n- apellido (str): Apellido del usuario.\n- email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n- roles (List[str]): Lista de nombres de roles asignados al usuario.\n- estado (str): Estado actual del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class UserResponse(BaseModel):\n    \"\"\"\n    Esquema para la respuesta que contiene informaci\u00f3n del usuario.\n\n    Atributos:\n    ---------\n        - id (int): Identificador \u00fanico del usuario.\n        - nombre (str): Nombre del usuario.\n        - apellido (str): Apellido del usuario.\n        - email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n        - roles (List[str]): Lista de nombres de roles asignados al usuario.\n        - estado (str): Estado actual del usuario.\n    \"\"\"\n    id: int\n    nombre: str\n    apellido: str\n    email: str\n    estado: str\n    rol: str\n    fincas: List[str]  # Add this line to include farm names\n\n    class Config:\n        from_attributes = True\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#actualizar-informacion-de-usuario","title":"Actualizar Informaci\u00f3n de Usuario","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para actualizar la informaci\u00f3n del usuario actual.</p>"},{"location":"user/schemas/#app.user.domain.schemas.UserUpdate--atributos","title":"Atributos:","text":"<pre><code>- nombre (Optional[str]): Nuevo nombre del usuario.\n- apellido (Optional[str]): Nuevo apellido del usuario.\n- password (Optional[str]): Nueva contrase\u00f1a del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class UserUpdate(BaseModel):\n    \"\"\"\n    Esquema para actualizar la informaci\u00f3n del usuario actual.\n\n    Atributos:\n    ---------\n        - nombre (Optional[str]): Nuevo nombre del usuario.\n        - apellido (Optional[str]): Nuevo apellido del usuario.\n        - password (Optional[str]): Nueva contrase\u00f1a del usuario.\n    \"\"\"\n    nombre: str\n    apellido: str\n    email: str\n\n    class Config:\n        from_attributes = True\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#actualizacion-de-usuario-por-administrador","title":"Actualizaci\u00f3n de Usuario por Administrador","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para que un administrador actualice la informaci\u00f3n de un usuario espec\u00edfico.</p>"},{"location":"user/schemas/#app.user.domain.schemas.AdminUserUpdate--atributos","title":"Atributos:","text":"<pre><code>- nombre (Optional[str]): Nuevo nombre del usuario.\n- apellido (Optional[str]): Nuevo apellido del usuario.\n- email (Optional[EmailStr]): Nuevo correo electr\u00f3nico del usuario.\n- roles (Optional[List[int]]): Nueva lista de IDs de roles asignados al usuario.\n- estado_id (Optional[int]): Nuevo ID de estado del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class AdminUserUpdate(BaseModel):\n    \"\"\"\n    Esquema para que un administrador actualice la informaci\u00f3n de un usuario espec\u00edfico.\n\n    Atributos:\n    ---------\n        - nombre (Optional[str]): Nuevo nombre del usuario.\n        - apellido (Optional[str]): Nuevo apellido del usuario.\n        - email (Optional[EmailStr]): Nuevo correo electr\u00f3nico del usuario.\n        - roles (Optional[List[int]]): Nueva lista de IDs de roles asignados al usuario.\n        - estado_id (Optional[int]): Nuevo ID de estado del usuario.\n    \"\"\"\n    nombre: str\n    apellido: str\n    email: str\n    estado_id: int\n    rol_id: int\n\n    class Config:\n        from_attributes = True\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#recuperacion-de-contrasena","title":"Recuperaci\u00f3n de Contrase\u00f1a","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para iniciar el proceso de recuperaci\u00f3n de contrase\u00f1a.</p>"},{"location":"user/schemas/#app.user.domain.schemas.PasswordRecoveryRequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class PasswordRecoveryRequest(BaseModel):\n    \"\"\"\n    Esquema para iniciar el proceso de recuperaci\u00f3n de contrase\u00f1a.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n    \"\"\"\n    email: str\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#confirmacion-de-pin-de-recuperacion","title":"Confirmaci\u00f3n de PIN de Recuperaci\u00f3n","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para confirmar el PIN de recuperaci\u00f3n de contrase\u00f1a.</p>"},{"location":"user/schemas/#app.user.domain.schemas.PinConfirmationRequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n- pin (str): PIN de recuperaci\u00f3n enviado al correo.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class PinConfirmationRequest(BaseModel):\n    \"\"\"\n    Esquema para confirmar el PIN de recuperaci\u00f3n de contrase\u00f1a.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n        - pin (str): PIN de recuperaci\u00f3n enviado al correo.\n    \"\"\"\n    email: str\n    pin: str\n\n    _validate_email = field_validator('email')(validate_email)\n</code></pre>"},{"location":"user/schemas/#restablecer-contrasena","title":"Restablecer Contrase\u00f1a","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema para restablecer la contrase\u00f1a del usuario.</p>"},{"location":"user/schemas/#app.user.domain.schemas.PasswordResetRequest--atributos","title":"Atributos:","text":"<pre><code>- email (EmailStr): Correo electr\u00f3nico del usuario.\n- new_password (str): Nueva contrase\u00f1a del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class PasswordResetRequest(BaseModel):\n    \"\"\"\n    Esquema para restablecer la contrase\u00f1a del usuario.\n\n    Atributos:\n    ---------\n        - email (EmailStr): Correo electr\u00f3nico del usuario.\n        - new_password (str): Nueva contrase\u00f1a del usuario.\n    \"\"\"\n    email: str\n    new_password: str\n\n    _validate_email = field_validator('email')(validate_email)\n    _validate_password = field_validator('new_password')(validate_password)\n</code></pre>"},{"location":"user/schemas/#usuario-en-la-base-de-datos","title":"Usuario en la Base de Datos","text":"<p>               Bases: <code>BaseModel</code></p> <p>Esquema que representa al usuario almacenado en la base de datos.</p>"},{"location":"user/schemas/#app.user.domain.schemas.UserInDB--atributos","title":"Atributos:","text":"<pre><code>- id (int): Identificador \u00fanico del usuario.\n- nombre (str): Nombre del usuario.\n- apellido (str): Apellido del usuario.\n- email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n- roles (List[str]): Lista de nombres de roles asignados al usuario.\n- estado (str): Estado actual del usuario.\n</code></pre> Source code in <code>app\\user\\domain\\schemas.py</code> <pre><code>class UserInDB(BaseModel):\n    \"\"\"\n    Esquema que representa al usuario almacenado en la base de datos.\n\n    Atributos:\n    ---------\n        - id (int): Identificador \u00fanico del usuario.\n        - nombre (str): Nombre del usuario.\n        - apellido (str): Apellido del usuario.\n        - email (EmailStr): Correo electr\u00f3nico \u00fanico del usuario.\n        - roles (List[str]): Lista de nombres de roles asignados al usuario.\n        - estado (str): Estado actual del usuario.\n    \"\"\"\n    id: int\n    nombre: str\n    apellido: str\n    email: str\n    password: str\n    failed_attempts: int\n    locked_until: datetime\n    state_id: int\n    roles: List[RoleInfo] = []\n\n    class Config:\n        from_attributes = True\n\n    _validate_email = field_validator('email')(validate_email)\n    _validate_password = field_validator('password')(validate_password)\n</code></pre>"},{"location":"user/use_cases/","title":"Casos de Uso de Usuario","text":"<p>Este documento describe los casos de uso relacionados con la gesti\u00f3n de usuarios en el sistema AgroInsight.</p>"},{"location":"user/use_cases/#proceso-de-creacion-de-usuario","title":"Proceso de Creaci\u00f3n de Usuario","text":""},{"location":"user/use_cases/#caso-de-uso-creacion-de-usuario","title":"Caso de Uso: Creaci\u00f3n de Usuario","text":"<p>Caso de uso para la creaci\u00f3n de un nuevo usuario en el sistema.</p> <p>Esta clase maneja la l\u00f3gica de negocio para el registro de nuevos usuarios, incluyendo la validaci\u00f3n de datos, la creaci\u00f3n del usuario en la base de datos, y el env\u00edo de correos de confirmaci\u00f3n.</p> <pre><code>- db (Session): La sesi\u00f3n de base de datos para realizar operaciones.\n- user_repository (UserRepository): Repositorio para operaciones de usuario.\n- state_validator (UserStateValidator): Validador de estados de usuario.\n</code></pre> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>class UserCreationUseCase:\n    \"\"\"\n    Caso de uso para la creaci\u00f3n de un nuevo usuario en el sistema.\n\n    Esta clase maneja la l\u00f3gica de negocio para el registro de nuevos usuarios,\n    incluyendo la validaci\u00f3n de datos, la creaci\u00f3n del usuario en la base de datos,\n    y el env\u00edo de correos de confirmaci\u00f3n.\n\n    Attributes:\n    ----------\n        - db (Session): La sesi\u00f3n de base de datos para realizar operaciones.\n        - user_repository (UserRepository): Repositorio para operaciones de usuario.\n        - state_validator (UserStateValidator): Validador de estados de usuario.\n    \"\"\"\n    def __init__(self, db: Session):\n        \"\"\"\n        Inicializa una nueva instancia de UserCreationUseCase.\n\n        Parameters:\n        -------\n            - db (Session): La sesi\u00f3n de base de datos a utilizar.\n        \"\"\"\n        self.db = db\n        self.user_repository = UserRepository(db)\n        self.state_validator = UserStateValidator(self.user_repository)\n\n    def execute(self, user_data: UserCreate) -&gt; SuccessResponse:\n        \"\"\"\n        Ejecuta el proceso de creaci\u00f3n de un nuevo usuario.\n\n        Este m\u00e9todo realiza las siguientes operaciones:\n\n        1. Verifica si el usuario ya existe.\n        2. Valida el estado del usuario si ya existe.\n        3. Crea un nuevo usuario con estado pendiente.\n        4. Asigna el rol de usuario no confirmado.\n        5. Crea y env\u00eda una confirmaci\u00f3n por correo electr\u00f3nico.\n\n        Parameters:\n            user_data (UserCreate): Datos del usuario a crear.\n\n        Returns:\n            SuccessResponse: Respuesta indicando el \u00e9xito de la operaci\u00f3n.\n\n        Raises:\n            DomainException: Si ocurre un error durante el proceso de creaci\u00f3n.\n            UserStateException: Si el estado del usuario no es v\u00e1lido.\n        \"\"\"\n        user = self.user_repository.get_user_by_email(user_data.email)\n\n        if user:\n\n            state_validation_result = self.state_validator.validate_user_state(\n                user,\n                disallowed_states=[UserState.ACTIVE, UserState.PENDING, UserState.INACTIVE, UserState.LOCKED]\n            )\n            if state_validation_result:\n                return state_validation_result\n\n        # Hash del password\n        hashed_password = hash_password(user_data.password)\n\n        # Obtener estado \"pendiente\" del usuario\n        pending_state_id = self.user_repository.get_pending_user_state_id()\n        if not pending_state_id:\n            raise UserStateException(\n                message=\"No se pudo encontrar el estado de usuario pendiente.\",\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                user_state=\"unknown\"\n            )\n\n        # Obtener rol \"no confirmado\"\n        unconfirmed_role = self.user_repository.get_unconfirmed_user_role()\n        if not unconfirmed_role:\n            raise DomainException(\n                message=\"No se pudo encontrar el rol de Usuario No Confirmado.\",\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            )\n\n        # Crear nuevo usuario\n        new_user = User(\n            nombre=user_data.nombre,\n            apellido=user_data.apellido,\n            email=user_data.email,\n            password=hashed_password,\n            state_id=pending_state_id\n        )\n        created_user = self.user_repository.create_user(new_user)\n\n        if not self.user_repository.assign_role_to_user(created_user.id, unconfirmed_role.id):\n            self.user_repository.delete_user(created_user)  # Eliminar el usuario si falla la asignaci\u00f3n del rol\n            raise DomainException(\n                message=\"No se pudo asignar el rol de Usuario No Confirmado.\",\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            )\n\n        # Intentar crear la confirmaci\u00f3n y enviar el correo\n        if not self.create_and_send_confirmation(created_user):\n            # Si falla la confirmaci\u00f3n, eliminar el usuario\n            self.user_repository.delete_user(created_user)\n            raise DomainException(\n                message=\"Error al crear la confirmaci\u00f3n de usuario.\",\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            )\n\n        return SuccessResponse(\n                message=\"Usuario creado. Por favor, revisa tu email para confirmar el registro.\"\n            )\n\n    def create_and_send_confirmation(self, user: User) -&gt; bool:\n        \"\"\"\n        Crea y env\u00eda una confirmaci\u00f3n de registro al usuario.\n\n        Este m\u00e9todo genera un PIN de confirmaci\u00f3n, crea un registro de confirmaci\u00f3n\n        en la base de datos y env\u00eda un correo electr\u00f3nico con el PIN al usuario.\n\n        Parameters:\n            user (User): El usuario para el cual se crea la confirmaci\u00f3n.\n\n        Returns:\n            bool: True si la confirmaci\u00f3n se cre\u00f3 y envi\u00f3 correctamente, False en caso contrario.\n        \"\"\"\n        try:\n            # Generar PIN y su hash\n            expiration_time = 10  # minutos\n            pin, pin_hash = generate_pin()\n            confirmation = ConfirmacionUsuario(\n                usuario_id=user.id,\n                pin=pin_hash,\n                expiracion=datetime.now(timezone.utc) + timedelta(minutes=expiration_time)\n            )\n\n            # Enviar correo de confirmaci\u00f3n y agregar la confirmaci\u00f3n al repositorio\n            if not self.send_confirmation_email(user.email, pin):\n                return False\n            return self.user_repository.add_user_confirmation(confirmation)\n        except Exception as e:\n            print(f\"Error al crear la confirmaci\u00f3n del usuario: {str(e)}\")\n            return False\n\n    def send_confirmation_email(self, email: str, pin: str) -&gt; bool:\n        \"\"\"\n        Env\u00eda un correo electr\u00f3nico de confirmaci\u00f3n al usuario.\n\n        Parameters:\n            email (str): La direcci\u00f3n de correo electr\u00f3nico del usuario.\n            pin (str): El PIN de confirmaci\u00f3n generado.\n\n        Returns:\n            bool: True si el correo se envi\u00f3 correctamente, False en caso contrario.\n        \"\"\"\n        subject = \"Confirma tu registro en AgroInSight\"\n        text_content = f\"Tu PIN de confirmaci\u00f3n es: {pin}\\nEste PIN expirar\u00e1 en 10 minutos.\"\n        html_content = f\"\"\"\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;p&gt;&lt;strong&gt;Tu PIN de confirmaci\u00f3n es: {pin}&lt;/strong&gt;&lt;/p&gt;\n                &lt;p&gt;Este PIN expirar\u00e1 en 10 minutos.&lt;/p&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n        \"\"\"\n        return send_email(email, subject, text_content, html_content)\n</code></pre> <p>Este caso de uso maneja la l\u00f3gica de negocio para el registro de nuevos usuarios, incluyendo la validaci\u00f3n de datos, la creaci\u00f3n del usuario en la base de datos, y el env\u00edo de correos de confirmaci\u00f3n.</p>"},{"location":"user/use_cases/#app.user.application.user_creation_process.user_creation_use_case.UserCreationUseCase.__init__","title":"<code>__init__(db)</code>","text":"<p>Inicializa una nueva instancia de UserCreationUseCase.</p> <pre><code>- db (Session): La sesi\u00f3n de base de datos a utilizar.\n</code></pre> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>def __init__(self, db: Session):\n    \"\"\"\n    Inicializa una nueva instancia de UserCreationUseCase.\n\n    Parameters:\n    -------\n        - db (Session): La sesi\u00f3n de base de datos a utilizar.\n    \"\"\"\n    self.db = db\n    self.user_repository = UserRepository(db)\n    self.state_validator = UserStateValidator(self.user_repository)\n</code></pre>"},{"location":"user/use_cases/#app.user.application.user_creation_process.user_creation_use_case.UserCreationUseCase.create_and_send_confirmation","title":"<code>create_and_send_confirmation(user)</code>","text":"<p>Crea y env\u00eda una confirmaci\u00f3n de registro al usuario.</p> <p>Este m\u00e9todo genera un PIN de confirmaci\u00f3n, crea un registro de confirmaci\u00f3n en la base de datos y env\u00eda un correo electr\u00f3nico con el PIN al usuario.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>El usuario para el cual se crea la confirmaci\u00f3n.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True si la confirmaci\u00f3n se cre\u00f3 y envi\u00f3 correctamente, False en caso contrario.</p> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>def create_and_send_confirmation(self, user: User) -&gt; bool:\n    \"\"\"\n    Crea y env\u00eda una confirmaci\u00f3n de registro al usuario.\n\n    Este m\u00e9todo genera un PIN de confirmaci\u00f3n, crea un registro de confirmaci\u00f3n\n    en la base de datos y env\u00eda un correo electr\u00f3nico con el PIN al usuario.\n\n    Parameters:\n        user (User): El usuario para el cual se crea la confirmaci\u00f3n.\n\n    Returns:\n        bool: True si la confirmaci\u00f3n se cre\u00f3 y envi\u00f3 correctamente, False en caso contrario.\n    \"\"\"\n    try:\n        # Generar PIN y su hash\n        expiration_time = 10  # minutos\n        pin, pin_hash = generate_pin()\n        confirmation = ConfirmacionUsuario(\n            usuario_id=user.id,\n            pin=pin_hash,\n            expiracion=datetime.now(timezone.utc) + timedelta(minutes=expiration_time)\n        )\n\n        # Enviar correo de confirmaci\u00f3n y agregar la confirmaci\u00f3n al repositorio\n        if not self.send_confirmation_email(user.email, pin):\n            return False\n        return self.user_repository.add_user_confirmation(confirmation)\n    except Exception as e:\n        print(f\"Error al crear la confirmaci\u00f3n del usuario: {str(e)}\")\n        return False\n</code></pre>"},{"location":"user/use_cases/#app.user.application.user_creation_process.user_creation_use_case.UserCreationUseCase.execute","title":"<code>execute(user_data)</code>","text":"<p>Ejecuta el proceso de creaci\u00f3n de un nuevo usuario.</p> <p>Este m\u00e9todo realiza las siguientes operaciones:</p> <ol> <li>Verifica si el usuario ya existe.</li> <li>Valida el estado del usuario si ya existe.</li> <li>Crea un nuevo usuario con estado pendiente.</li> <li>Asigna el rol de usuario no confirmado.</li> <li>Crea y env\u00eda una confirmaci\u00f3n por correo electr\u00f3nico.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>user_data</code> <code>UserCreate</code> <p>Datos del usuario a crear.</p> required <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <code>SuccessResponse</code> <p>Respuesta indicando el \u00e9xito de la operaci\u00f3n.</p> <p>Raises:</p> Type Description <code>DomainException</code> <p>Si ocurre un error durante el proceso de creaci\u00f3n.</p> <code>UserStateException</code> <p>Si el estado del usuario no es v\u00e1lido.</p> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>def execute(self, user_data: UserCreate) -&gt; SuccessResponse:\n    \"\"\"\n    Ejecuta el proceso de creaci\u00f3n de un nuevo usuario.\n\n    Este m\u00e9todo realiza las siguientes operaciones:\n\n    1. Verifica si el usuario ya existe.\n    2. Valida el estado del usuario si ya existe.\n    3. Crea un nuevo usuario con estado pendiente.\n    4. Asigna el rol de usuario no confirmado.\n    5. Crea y env\u00eda una confirmaci\u00f3n por correo electr\u00f3nico.\n\n    Parameters:\n        user_data (UserCreate): Datos del usuario a crear.\n\n    Returns:\n        SuccessResponse: Respuesta indicando el \u00e9xito de la operaci\u00f3n.\n\n    Raises:\n        DomainException: Si ocurre un error durante el proceso de creaci\u00f3n.\n        UserStateException: Si el estado del usuario no es v\u00e1lido.\n    \"\"\"\n    user = self.user_repository.get_user_by_email(user_data.email)\n\n    if user:\n\n        state_validation_result = self.state_validator.validate_user_state(\n            user,\n            disallowed_states=[UserState.ACTIVE, UserState.PENDING, UserState.INACTIVE, UserState.LOCKED]\n        )\n        if state_validation_result:\n            return state_validation_result\n\n    # Hash del password\n    hashed_password = hash_password(user_data.password)\n\n    # Obtener estado \"pendiente\" del usuario\n    pending_state_id = self.user_repository.get_pending_user_state_id()\n    if not pending_state_id:\n        raise UserStateException(\n            message=\"No se pudo encontrar el estado de usuario pendiente.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            user_state=\"unknown\"\n        )\n\n    # Obtener rol \"no confirmado\"\n    unconfirmed_role = self.user_repository.get_unconfirmed_user_role()\n    if not unconfirmed_role:\n        raise DomainException(\n            message=\"No se pudo encontrar el rol de Usuario No Confirmado.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        )\n\n    # Crear nuevo usuario\n    new_user = User(\n        nombre=user_data.nombre,\n        apellido=user_data.apellido,\n        email=user_data.email,\n        password=hashed_password,\n        state_id=pending_state_id\n    )\n    created_user = self.user_repository.create_user(new_user)\n\n    if not self.user_repository.assign_role_to_user(created_user.id, unconfirmed_role.id):\n        self.user_repository.delete_user(created_user)  # Eliminar el usuario si falla la asignaci\u00f3n del rol\n        raise DomainException(\n            message=\"No se pudo asignar el rol de Usuario No Confirmado.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        )\n\n    # Intentar crear la confirmaci\u00f3n y enviar el correo\n    if not self.create_and_send_confirmation(created_user):\n        # Si falla la confirmaci\u00f3n, eliminar el usuario\n        self.user_repository.delete_user(created_user)\n        raise DomainException(\n            message=\"Error al crear la confirmaci\u00f3n de usuario.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        )\n\n    return SuccessResponse(\n            message=\"Usuario creado. Por favor, revisa tu email para confirmar el registro.\"\n        )\n</code></pre>"},{"location":"user/use_cases/#app.user.application.user_creation_process.user_creation_use_case.UserCreationUseCase.send_confirmation_email","title":"<code>send_confirmation_email(email, pin)</code>","text":"<p>Env\u00eda un correo electr\u00f3nico de confirmaci\u00f3n al usuario.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>La direcci\u00f3n de correo electr\u00f3nico del usuario.</p> required <code>pin</code> <code>str</code> <p>El PIN de confirmaci\u00f3n generado.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True si el correo se envi\u00f3 correctamente, False en caso contrario.</p> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>def send_confirmation_email(self, email: str, pin: str) -&gt; bool:\n    \"\"\"\n    Env\u00eda un correo electr\u00f3nico de confirmaci\u00f3n al usuario.\n\n    Parameters:\n        email (str): La direcci\u00f3n de correo electr\u00f3nico del usuario.\n        pin (str): El PIN de confirmaci\u00f3n generado.\n\n    Returns:\n        bool: True si el correo se envi\u00f3 correctamente, False en caso contrario.\n    \"\"\"\n    subject = \"Confirma tu registro en AgroInSight\"\n    text_content = f\"Tu PIN de confirmaci\u00f3n es: {pin}\\nEste PIN expirar\u00e1 en 10 minutos.\"\n    html_content = f\"\"\"\n    &lt;html&gt;\n        &lt;body&gt;\n            &lt;p&gt;&lt;strong&gt;Tu PIN de confirmaci\u00f3n es: {pin}&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;Este PIN expirar\u00e1 en 10 minutos.&lt;/p&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return send_email(email, subject, text_content, html_content)\n</code></pre>"},{"location":"user/use_cases/#metodos-principales","title":"M\u00e9todos Principales","text":""},{"location":"user/use_cases/#execute","title":"execute","text":"<p>Ejecuta el proceso de creaci\u00f3n de un nuevo usuario.</p> <p>Este m\u00e9todo realiza las siguientes operaciones:</p> <ol> <li>Verifica si el usuario ya existe.</li> <li>Valida el estado del usuario si ya existe.</li> <li>Crea un nuevo usuario con estado pendiente.</li> <li>Asigna el rol de usuario no confirmado.</li> <li>Crea y env\u00eda una confirmaci\u00f3n por correo electr\u00f3nico.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>user_data</code> <code>UserCreate</code> <p>Datos del usuario a crear.</p> required <p>Returns:</p> Name Type Description <code>SuccessResponse</code> <code>SuccessResponse</code> <p>Respuesta indicando el \u00e9xito de la operaci\u00f3n.</p> <p>Raises:</p> Type Description <code>DomainException</code> <p>Si ocurre un error durante el proceso de creaci\u00f3n.</p> <code>UserStateException</code> <p>Si el estado del usuario no es v\u00e1lido.</p> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>def execute(self, user_data: UserCreate) -&gt; SuccessResponse:\n    \"\"\"\n    Ejecuta el proceso de creaci\u00f3n de un nuevo usuario.\n\n    Este m\u00e9todo realiza las siguientes operaciones:\n\n    1. Verifica si el usuario ya existe.\n    2. Valida el estado del usuario si ya existe.\n    3. Crea un nuevo usuario con estado pendiente.\n    4. Asigna el rol de usuario no confirmado.\n    5. Crea y env\u00eda una confirmaci\u00f3n por correo electr\u00f3nico.\n\n    Parameters:\n        user_data (UserCreate): Datos del usuario a crear.\n\n    Returns:\n        SuccessResponse: Respuesta indicando el \u00e9xito de la operaci\u00f3n.\n\n    Raises:\n        DomainException: Si ocurre un error durante el proceso de creaci\u00f3n.\n        UserStateException: Si el estado del usuario no es v\u00e1lido.\n    \"\"\"\n    user = self.user_repository.get_user_by_email(user_data.email)\n\n    if user:\n\n        state_validation_result = self.state_validator.validate_user_state(\n            user,\n            disallowed_states=[UserState.ACTIVE, UserState.PENDING, UserState.INACTIVE, UserState.LOCKED]\n        )\n        if state_validation_result:\n            return state_validation_result\n\n    # Hash del password\n    hashed_password = hash_password(user_data.password)\n\n    # Obtener estado \"pendiente\" del usuario\n    pending_state_id = self.user_repository.get_pending_user_state_id()\n    if not pending_state_id:\n        raise UserStateException(\n            message=\"No se pudo encontrar el estado de usuario pendiente.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            user_state=\"unknown\"\n        )\n\n    # Obtener rol \"no confirmado\"\n    unconfirmed_role = self.user_repository.get_unconfirmed_user_role()\n    if not unconfirmed_role:\n        raise DomainException(\n            message=\"No se pudo encontrar el rol de Usuario No Confirmado.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        )\n\n    # Crear nuevo usuario\n    new_user = User(\n        nombre=user_data.nombre,\n        apellido=user_data.apellido,\n        email=user_data.email,\n        password=hashed_password,\n        state_id=pending_state_id\n    )\n    created_user = self.user_repository.create_user(new_user)\n\n    if not self.user_repository.assign_role_to_user(created_user.id, unconfirmed_role.id):\n        self.user_repository.delete_user(created_user)  # Eliminar el usuario si falla la asignaci\u00f3n del rol\n        raise DomainException(\n            message=\"No se pudo asignar el rol de Usuario No Confirmado.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        )\n\n    # Intentar crear la confirmaci\u00f3n y enviar el correo\n    if not self.create_and_send_confirmation(created_user):\n        # Si falla la confirmaci\u00f3n, eliminar el usuario\n        self.user_repository.delete_user(created_user)\n        raise DomainException(\n            message=\"Error al crear la confirmaci\u00f3n de usuario.\",\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        )\n\n    return SuccessResponse(\n            message=\"Usuario creado. Por favor, revisa tu email para confirmar el registro.\"\n        )\n</code></pre>"},{"location":"user/use_cases/#create_and_send_confirmation","title":"create_and_send_confirmation","text":"<p>Crea y env\u00eda una confirmaci\u00f3n de registro al usuario.</p> <p>Este m\u00e9todo genera un PIN de confirmaci\u00f3n, crea un registro de confirmaci\u00f3n en la base de datos y env\u00eda un correo electr\u00f3nico con el PIN al usuario.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>El usuario para el cual se crea la confirmaci\u00f3n.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True si la confirmaci\u00f3n se cre\u00f3 y envi\u00f3 correctamente, False en caso contrario.</p> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>def create_and_send_confirmation(self, user: User) -&gt; bool:\n    \"\"\"\n    Crea y env\u00eda una confirmaci\u00f3n de registro al usuario.\n\n    Este m\u00e9todo genera un PIN de confirmaci\u00f3n, crea un registro de confirmaci\u00f3n\n    en la base de datos y env\u00eda un correo electr\u00f3nico con el PIN al usuario.\n\n    Parameters:\n        user (User): El usuario para el cual se crea la confirmaci\u00f3n.\n\n    Returns:\n        bool: True si la confirmaci\u00f3n se cre\u00f3 y envi\u00f3 correctamente, False en caso contrario.\n    \"\"\"\n    try:\n        # Generar PIN y su hash\n        expiration_time = 10  # minutos\n        pin, pin_hash = generate_pin()\n        confirmation = ConfirmacionUsuario(\n            usuario_id=user.id,\n            pin=pin_hash,\n            expiracion=datetime.now(timezone.utc) + timedelta(minutes=expiration_time)\n        )\n\n        # Enviar correo de confirmaci\u00f3n y agregar la confirmaci\u00f3n al repositorio\n        if not self.send_confirmation_email(user.email, pin):\n            return False\n        return self.user_repository.add_user_confirmation(confirmation)\n    except Exception as e:\n        print(f\"Error al crear la confirmaci\u00f3n del usuario: {str(e)}\")\n        return False\n</code></pre>"},{"location":"user/use_cases/#send_confirmation_email","title":"send_confirmation_email","text":"<p>Env\u00eda un correo electr\u00f3nico de confirmaci\u00f3n al usuario.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>La direcci\u00f3n de correo electr\u00f3nico del usuario.</p> required <code>pin</code> <code>str</code> <p>El PIN de confirmaci\u00f3n generado.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True si el correo se envi\u00f3 correctamente, False en caso contrario.</p> Source code in <code>app\\user\\application\\user_creation_process\\user_creation_use_case.py</code> <pre><code>def send_confirmation_email(self, email: str, pin: str) -&gt; bool:\n    \"\"\"\n    Env\u00eda un correo electr\u00f3nico de confirmaci\u00f3n al usuario.\n\n    Parameters:\n        email (str): La direcci\u00f3n de correo electr\u00f3nico del usuario.\n        pin (str): El PIN de confirmaci\u00f3n generado.\n\n    Returns:\n        bool: True si el correo se envi\u00f3 correctamente, False en caso contrario.\n    \"\"\"\n    subject = \"Confirma tu registro en AgroInSight\"\n    text_content = f\"Tu PIN de confirmaci\u00f3n es: {pin}\\nEste PIN expirar\u00e1 en 10 minutos.\"\n    html_content = f\"\"\"\n    &lt;html&gt;\n        &lt;body&gt;\n            &lt;p&gt;&lt;strong&gt;Tu PIN de confirmaci\u00f3n es: {pin}&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;Este PIN expirar\u00e1 en 10 minutos.&lt;/p&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return send_email(email, subject, text_content, html_content)\n</code></pre>"}]}